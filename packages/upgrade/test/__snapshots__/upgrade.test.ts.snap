// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 1`] = `
"// Test cases for TS2322

/* @ts-expect-error @rehearsal TODO TS2322: The variable 'dummy_const' has type 'number', but 'string' is assigned. Please convert 'string' to 'number' or change variable's type. */
const dummy_const: number = \\"string\\";

let dummy_var = 0;
/* @ts-expect-error @rehearsal TODO TS2322: The variable 'dummy_var' has type 'number', but 'string' is assigned. Please convert 'string' to 'number' or change variable's type. */
dummy_var = \\"string\\";

console.log(dummy_const, dummy_var);

function demo(): void {
  /* @ts-expect-error @rehearsal TODO TS2322: The function expects to return 'void', but 'string' is returned. Please convert 'string' value to 'void' or update the function's return type. */
  return \\"dummy-string\\";
}

demo();
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 2`] = `
"function removeFirstChar(str: string): string | undefined {
  return str.substring(1);
}

let changeable: unknown;
changeable = \\"yes\\";

/* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'unknown' is not assignable to parameter of type 'string'. Consider specifying type of argument to be 'string', using type assertion: '(changeable as string)', or using type guard: 'if (changeable instanceof string) { ... }'. */
console.log(removeFirstChar(changeable));

const num = 7;
/* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'number' is not assignable to parameter of type 'string'. Consider verifying both types, using type assertion: '(num as string)', or using type guard: 'if (num instanceof string) { ... }'. */
console.log(removeFirstChar(num));
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 3`] = `
"import { sep } from \\"path\\";

sep;

function defined_function_with_params(_defined_param: string): void {
  return;
}

defined_function_with_params(\\"dummy-string\\");
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 4`] = `""`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 5`] = `
"const testModule = function () {
  return \\"test\\";
};

module.exports = testModule;
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 6`] = `
"import React from \\"react\\";

export function test(): void {}

export function Component(): Element {
  /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'NonExistingElement'. */
  const element1 = <NonExistingElement />;

  const element2 = (
    <h1>
      The
      Very-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y
      Long Title
      {/* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'NonExistingElement'. */}
      <NonExistingElement>...</NonExistingElement>
      {/* @ts-expect-error @rehearsal TODO TS2322: Type 'notExistingVariable: any' is being returned or assigned, but type 'ReactNode' is expected. Please convert type 'notExistingVariable: any' to type 'ReactNode', or return or assign a variable of type 'ReactNode' */}
      <p>{{ $notExistingVariable }}</p>
    </h1>
  );

  console.log(element1, element2);

  /* @ts-expect-error @rehearsal TODO TS2740: Type 'ReactElement<any, any>' is missing the following properties from type 'Element': attributes, classList, className, clientHeight, and 163 more. */
  return <NonExistingFragment />;
}

export function Test2(): Element {
  const someBoolean = true;

  /* @ts-expect-error @rehearsal TODO TS2322: The function expects to return 'Element', but 'JSX.Element' is returned. Please convert 'JSX.Element' value to 'Element' or update the function's return type. */
  return someBoolean ? <br doesNotExist=\\"fail\\" /> : <br />;
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 7`] = `
"import { Component } from \\"react\\";

function action(_target: unknown, propertyKey: string): void {
  console.log(propertyKey);
}

/**
 * The Radio component is to display a list of radio options
 */
export class Radio extends Component {
  args = {
    onChange: async (
      one: boolean,
      two: boolean,
      v: boolean
    ): Promise<boolean> => one || two || v,
  };

  one = true;
  two = false;

  /**
   * Action
   * @return {string}
   */
  @action
  /* @ts-expect-error @rehearsal TODO TS2355: A function whose declared type is neither 'void' nor 'any' must return a value. */
  async onRadioChange(value: boolean): Promise<string> {
    this.one = true;
    this.two = false;

    this.args
      .onChange(this.one, this.two, value)
      .then((status) => {
        if (status) {
          this.one = false;
        } else {
          this.two = true;
        }
      })
      .catch(() => {
        this.two = this.one;
      });
  }
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 8`] = `
"import React from \\"react\\";

export function test(): void {}

export function Component(): Element {
  /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'NonExistingElement'. */
  const element1 = <NonExistingElement />;

  const element2 = (
    <h1>
      The
      Very-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y-y
      Long Title
      {/* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'NonExistingElement'. */}
      <NonExistingElement>...</NonExistingElement>
      {/* @ts-expect-error @rehearsal TODO TS2322: Type 'notExistingVariable: any' is being returned or assigned, but type 'ReactNode' is expected. Please convert type 'notExistingVariable: any' to type 'ReactNode', or return or assign a variable of type 'ReactNode' */}
      <p>{{ $notExistingVariable }}</p>
    </h1>
  );

  console.log(element1, element2);

  /* @ts-expect-error @rehearsal TODO TS2740: Type 'ReactElement<any, any>' is missing the following properties from type 'Element': attributes, classList, className, clientHeight, and 163 more. */
  return <NonExistingFragment />;
}

export function Test2(): Element {
  const someBoolean = true;

  /* @ts-expect-error @rehearsal TODO TS2322: The function expects to return 'Element', but 'JSX.Element' is returned. Please convert 'JSX.Element' value to 'Element' or update the function's return type. */
  return someBoolean ? <br doesNotExist=\\"fail\\" /> : <br />;
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 9`] = `
"export function template(info: object): string {
  let text = \\"\\";

  /* @ts-expect-error @rehearsal TODO TS2339: Property 'one' does not exist on type 'object'. */
  text += \`
    <module>
    <info argumentOne=\\"\${info.one}\\" argumentTwo=\\"\${info.two}\\"/>
    </module>\`;

  /* @ts-expect-error @rehearsal TODO TS2339: Property 'two' does not exist on type 'object'. */
  text += \`
    <module>
    <info argumentOne=\\"\${info.two}\\" argumentTwo=\\"\${info.three}\\"/>
    <info argumentOne=\\"\${info.two}\\" argumentTwo=\\"\${info.three}\\"/>
    </module>\`;

  /* @ts-expect-error @rehearsal TODO TS2339: Property 'three' does not exist on type 'object'. */
  text += \`<module>
    <info argumentOne=\\"\${info.three}\\" argumentTwo=\\"\${info.four}\\"/>
    <info argumentOne=\\"\${info.three}\\" argumentTwo=\\"\${info.four}\\"/>
    <info argumentOne=\\"\${info.three}\\" argumentTwo=\\"\${info.four}\\"/>
    </module>\`;

  return text;
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 10`] = `
"/**
 * @param {String} a - some string
 * @param {any} b - hardcoded to any just for demonstrative purposes
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveAny(a: string, b): void {
  console.log(a, b);
}

/**
 * @param {String} a - some string
 * @param {string | any} b - hardcoded to any just for demonstrative purposes
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveSomethingOrAny(a: string, b): void {
  console.log(a, b);
}

/**
 * @param {String} a - A string
 * @returns {Promise} the promise that resolves when the request has been resumed
 */
export function returnTypeHasGenericAny(a: string): Promise<string> {
  return Promise.resolve(a);
}

/**
 * @param {String} a - some string
 * @param {any} b - hardcoded to any just for demonstrative purposes
 * @param {object} c
 * @returns {Promise} the promise that resolves when the request has been resumed
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveAnyAndReturnHasGenericAny(a: string, b, c) {
  return Promise.resolve([a, b, c]);
}

/**
 * @param {String} a - some string
 * @param {any} b - hardcoded to any just for demonstrative purposes
 * @returns {any} - just return something
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveAnyAndReturnIsAny(a: string, b) {
  console.log(a);
  return b;
}

function capitalize(str: string): string {
  return str[0].toUpperCase() + str.substring(1);
}

/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'args' implicitly has an 'any' type. */
export function doSomething(args, name: string): string | undefined {
  if (!name) {
    return;
  }
  if (args && args.length < 2) {
    return;
  }
  return capitalize(name);
}

/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'handler' implicitly has an 'any' type. */
export function handle(text: string, handler) {
  return handler.string(text);
}

const models = new WeakMap();

/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'model' implicitly has an 'any' type. */
export function collectModel(model, value): void {
  models.set(model, value);
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 11`] = `
"/* Existing comment */

export function usesMissingFunction(): void {
  /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'whereAmI'. */
  return whereAmI();
}

export function usesMissingVariable(): boolean {
  const something = true;
  const existingVar = true;

  /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'missingVar'. */
  return something ? missingVar : existingVar;
}

export function usesMissingVarWithLongName(): boolean {
  const something = true;

  return something
    ? /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'missingVar'. */
      missingVar
    : /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'. */
      missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString;
}

// The next function call is not properly formatted
/* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'timestamp'. */
timestamp();

/* @ts-expect-error @rehearsal TODO TS2306: File './module.ts' is not a module. */
import testModule from \\"./module\\";

testModule();
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 12`] = `
"function action(_target: unknown, propertyKey: string): void {
  console.log(propertyKey);
}

/**
 * Breakpoint Map
 * @type {Object<string, number>}
 */
const breakpointMap: { [s: string]: number } = { s: 1, m: 2, l: 3 };

/**
 * Ordered Breakpoints
 * @type {Array<[string, number]>}
 */
const orderedBreakpointsLongNameConstant: Array<[string, number]> =
  Object.entries(breakpointMap).sort((a, b) => a[1] - b[1]);

export class Foo {
  /**
   * Size
   * @type {string}
   */
  @action size = \\"l\\";

  /**
   * Viewport Width
   * @type {string}
   */
  @action viewportWidth: string | undefined;

  /**
   * Foo Method
   * @param {string} size
   * @returns {boolean}
   */
  fooMethod(size: string): boolean {
    const nextBreakpointIndex =
      orderedBreakpointsLongNameConstant.indexOf(
        /* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'string, number] | undefined' is not assignable to parameter of type 'string, number'. Consider verifying both types, using type assertion: '(         orderedBreakpointsLongNameConstant.find(([key]) => key === size) as string)', or using type guard: 'if (         orderedBreakpointsLongNameConstant.find(([key]) => key === size) instanceof string) { ... }'. */
        orderedBreakpointsLongNameConstant.find(([key]) => key === size)
      ) + 1;
    if (nextBreakpointIndex < orderedBreakpointsLongNameConstant.length) {
      return (
        /* @ts-expect-error @rehearsal TODO TS2532: Object is possibly 'undefined'. */
        this.viewportWidth >=
        orderedBreakpointsLongNameConstant[nextBreakpointIndex][1]
      );
    }

    return false;
  }

  /**
   * Is Equal
   * @param {string} size
   * @returns {boolean}
   */
  isEqual(size: string): boolean {
    return this.size === size;
  }

  /**
   * Is Less
   * @param {string} size
   * @returns {boolean}
   */
  isLess(size: string): boolean {
    /* @ts-expect-error @rehearsal TODO TS2532: Object is possibly 'undefined'. */
    return this.viewportWidth < breakpointMap[size];
  }
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 13`] = `
"function bar(): void {
  /* @ts-expect-error @rehearsal TODO TS7034: Variable 'emtpy' implicitly has type 'any[]' in some locations where its type cannot be determined. */
  const emtpy = [];
  /* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'any' is not assignable to parameter of type 'never'. Consider verifying both types, using type assertion: '(emtpy as string)', or using type guard: 'if (emtpy instanceof string) { ... }'. */
  thing(emtpy, \\"foo\\");
}

function thing(_bar = [], thing: string): void {
  const fiz = [];
  fiz.push(thing);
  /* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'string' is not assignable to parameter of type 'never'. Consider verifying both types, using type assertion: '(fiz as string)', or using type guard: 'if (fiz instanceof string) { ... }'. */
  baz(fiz);
}

function baz(_bar = []): void {}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 14`] = `
"/**
 * @param {String} a - some string
 * @param {Object} b - hardcoded to any just for demonstrative purposes
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveObject(a: string, b): void {
  console.log(a, b);
}

/**
 * @param {String} a - some string
 * @param {String | Object} b - hardcoded to any just for demonstrative purposes
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveSomethingOrObject(a: string, b): void {
  console.log(a, b);
}

/**
 * @param {String} a - some string
 * @param {Object[]} b - hardcoded to any just for demonstrative purposes
 * @returns {Promise} the promise that resolves when the request has been resumed
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'b' implicitly has an 'any' type. */
export function oneOfParamsHaveObjectAndReturnHasGenericObject(a: string, b) {
  return Promise.resolve([a, b]);
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 15`] = `
"/**
 * This is a file with some comments added in a previous run of rehearsal
 */
import fs from \\"fs\\";

/* This is just a second comment that should not be touch */

fs.existsSync(\\".\\");

fs.existsSync(\\".\\");

fs.existsSync(\\"@rehearsal\\");

// The next two cases has to be fixed
try {
  console.log(\\"success\\");
} catch (e) {
  console.log((e as Error).message);
  /* @ts-expect-error @rehearsal TODO TS18046: 'e' is of type 'unknown'. */
  console.log(e.notErrorMember);
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 16`] = `
"export function test1(): string {
  return \\"Test this\\";
}

export const test2 = () => console.log(\\"Test this\\");

export const test3 = () => \\"Test this\\";

export function test4<Type>(arg: Array<Type>): Type[] {
  return arg;
}

export async function test5(): Promise<TestClass> {
  return new TestClass();
}

interface TestInterface {
  test1(): string | undefined;
}

class BaseTestClass {
  test2(param: boolean): number | string {
    return param ? 0 : \\"0\\";
  }
}

export class TestClass extends BaseTestClass implements TestInterface {
  test1(): string | undefined {
    return undefined;
  }

  test2(): string | number {
    return 0;
  }
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 17`] = `
"// Basics

class Animal {
  title = \\"\\";

  test(test: string): string {
    return test;
  }

  say(message: string): string {
    return message;
  }

  feed(food: Food, quantity: number): boolean {
    console.log(food, quantity);
    return false;
  }
}

interface Wild {
  wild(place: string): string;
}

interface Happy {
  happy(num: number): void;
}

class Food {
  title: string;

  constructor(title: string) {
    this.title = title;
  }
}

class Dog extends Animal {
  say(message: string): string {
    console.log(message);
    return \\"bar\\";
  }
}

export class WildDog extends Dog implements Wild, Happy {
  say(message: string): string {
    console.log(message);
    return \\"bar\\";
  }

  override feed(food: Food, quantity: number): boolean {
    console.log(food, quantity);
    return true;
  }

  wild(place: string): string {
    return place;
  }

  happy(num: number): void {
    console.log(num);
  }
}

export class Cat extends Animal {
  override say(text: string): string {
    console.log(text);
    return \\"meo\\";
  }

  feed(something: Food): boolean {
    console.log(something);
    return false;
  }
}

// Generics

type Thing = {
  foo: number;
};

// Generic Interfaces

interface GenericThingInterface<A = number, B = string> {
  thing(a: A, b: B): void;
}

interface ConstrainedThingInterface<C extends Thing> {
  thing(c: C): void;
}

export class GenericThingImp1 implements GenericThingInterface {
  thing(a: number, b: string): void {
    console.log(a, b);
  }
}

export class GenericThingImp2
  implements GenericThingInterface<boolean, number>
{
  thing(a: boolean, b: number): void {
    console.log(a, b);
  }
}

export class GenericThingImp3
  implements ConstrainedThingInterface<{ foo: number; bar: string }>
{
  thing(c: { foo: number; bar: string }): void {
    console.log(c);
  }
}

// Generic Classes

class GenericThingClass<A = number, B = string> {
  thing(a: A, b: B): void {
    console.log(a, b);
  }
}

class ConstrainedThingClass<C extends Thing> {
  thing(c: C): void {
    console.log(c);
  }
}

export class GenericThingExt1 extends GenericThingClass {
  thing(a: number, b: string): void {
    console.log(a, b);
  }
}

export class GenericThingExt2 extends GenericThingClass<boolean, number> {
  thing(a: boolean, b: number): void {
    console.log(a, b);
  }
}

export class GenericThingExt3 extends ConstrainedThingClass<{
  foo: number;
  bar: string;
}> {
  thing(c: { foo: number; bar: string }): void {
    console.log(c);
  }
}

// Multiple signatures

interface MultipleInterface {
  foo(a: number): number;
  foo(b: string): string;
  foo(a: number, b: string): boolean;

  moo(a: string): string;
}

class MultipleClass {
  boo(a: number): number;
  boo(b: string): string;
  boo(a: number, b: string): boolean;
  boo(ab: number | string, b?: string): number | string | boolean {
    return !ab || !b;
  }
}

export class MultipleImpl extends MultipleClass implements MultipleInterface {
  /* @ts-expect-error @rehearsal TODO TS2416: Property 'boo' in type 'MultipleImpl' is not assignable to the same property in base type 'MultipleClass'..  Type '(ab: any, b?: any) => boolean' is not assignable to type '{ (a: number): number; (b: string): string; (a: number, b: string): boolean; }'..    Type 'boolean' is not assignable to type 'number'. */
  boo(ab, b?): boolean {
    return !ab || !b;
  }

  /* @ts-expect-error @rehearsal TODO TS2416: Property 'foo' in type 'MultipleImpl' is not assignable to the same property in base type 'MultipleInterface'..  Type '(ab: any, b?: any) => boolean' is not assignable to type '{ (a: number): number; (b: string): string; (a: number, b: string): boolean; }'..    Type 'boolean' is not assignable to type 'number'. */
  foo(ab, b?): boolean {
    return !ab || !b;
  }

  moo(b: string): string {
    return b;
  }
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 18`] = `
"export function test1(me: string): string {
  return \\"This is \\" + me;
}

test1(\\"test\\");

/**
 * JSDoc
 * @param {number} me
 * @return {string}
 */
export function test2(me: number): string {
  return me.toString();
}

test2(0);

/**
 * JSDoc is ignored
 * @param {number} me
 * @return {string}
 */
export function test3(me: number): string {
  return me.toString();
}

/* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'string' is not assignable to parameter of type 'number'. Consider verifying both types, using type assertion: '(\\"O\\" as string)', or using type guard: 'if (\\"O\\" instanceof string) { ... }'. */
test3(\\"O\\");

export class A {
  /**
   * JSDoc
   * @param {number} me
   * @return {string}
   */
  test4(me: number): string {
    return me.toString(2);
  }
}

export class Foo {
  value = 0;

  get foo() {
    return this.value;
  }

  set foo(value) {
    this.value = value;
  }

  boo(value: number): number | null {
    this.value = value;

    if (this.value) {
      return null;
    } else {
      return this.value;
    }
  }
}

/**
 * JSDoc
 *
 * @param {number} a
 * @param {(string|number)} b
 * @param {<callbackFunction>} c
 * @param {UnavailableType} d
 *
 * @return {void}
 */
/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'c' implicitly has an 'any' type. */
export function think(a: number, b: string | number, c, d): void {
  return console.log(a, b, c, d);
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 19`] = `
"{
  \\"compilerOptions\\": {
    \\"allowSyntheticDefaultImports\\": true,
    \\"composite\\": true,
    \\"declaration\\": true,
    \\"declarationMap\\": true,
    \\"esModuleInterop\\": true,
    \\"experimentalDecorators\\": true,
    \\"jsx\\": \\"react\\",
    \\"module\\": \\"commonjs\\",
    \\"moduleResolution\\": \\"node\\",
    \\"newLine\\": \\"LF\\",
    \\"noImplicitReturns\\": false,
    \\"noUnusedLocals\\": true,
    \\"noUnusedParameters\\": true,
    \\"resolveJsonModule\\": true,
    \\"sourceMap\\": true,
    \\"strict\\": true,
    \\"target\\": \\"es2017\\"
  }
}
"
`;

exports[`Test upgrade > should fix errors or provide hints for errors in the original files 20`] = `
"{
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"root\\": true,
  \\"env\\": {
    \\"shared-node-browser\\": true
  },
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [\\"@typescript-eslint\\", \\"prettier\\"],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}
"
`;

exports[`Test upgrade > should output the correct data from upgrade 1`] = `
{
  "fixedItemCount": 114,
  "items": [
    {
      "analysisTarget": "2322.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "The variable 'dummy_const' has type 'number', but 'string' is assigned. Please convert 'string' to 'number' or change variable's type.",
      "hintAdded": true,
      "message": "Type 'string' is not assignable to type 'number'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 18,
        "endLine": 4,
        "startColumn": 7,
        "startLine": 4,
      },
      "nodeText": "dummy_const",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "2322.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "The variable 'dummy_var' has type 'number', but 'string' is assigned. Please convert 'string' to 'number' or change variable's type.",
      "hintAdded": true,
      "message": "Type 'string' is not assignable to type 'number'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 10,
        "endLine": 8,
        "startColumn": 1,
        "startLine": 8,
      },
      "nodeText": "dummy_var",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "2322.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "The function expects to return 'void', but 'string' is returned. Please convert 'string' value to 'void' or update the function's return type.",
      "hintAdded": true,
      "message": "Type 'string' is not assignable to type 'void'.",
      "nodeKind": "ReturnStatement",
      "nodeLocation": {
        "endColumn": 25,
        "endLine": 14,
        "startColumn": 3,
        "startLine": 14,
      },
      "nodeText": "return \\"dummy-string\\";",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "2345.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/42421501/error-ts2345-argument-of-type-t-is-not-assignable-to-parameter-of-type-objec",
      "hint": "Argument of type 'unknown' is not assignable to parameter of type 'string'. Consider specifying type of argument to be 'string', using type assertion: '(changeable as string)', or using type guard: 'if (changeable instanceof string) { ... }'.",
      "hintAdded": true,
      "message": "Argument of type 'unknown' is not assignable to parameter of type 'string'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 39,
        "endLine": 9,
        "startColumn": 29,
        "startLine": 9,
      },
      "nodeText": "changeable",
      "ruleId": "TS2345",
      "type": 0,
    },
    {
      "analysisTarget": "2345.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/42421501/error-ts2345-argument-of-type-t-is-not-assignable-to-parameter-of-type-objec",
      "hint": "Argument of type 'number' is not assignable to parameter of type 'string'. Consider verifying both types, using type assertion: '(num as string)', or using type guard: 'if (num instanceof string) { ... }'.",
      "hintAdded": true,
      "message": "Argument of type 'number' is not assignable to parameter of type 'string'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 32,
        "endLine": 13,
        "startColumn": 29,
        "startLine": 13,
      },
      "nodeText": "num",
      "ruleId": "TS2345",
      "type": 0,
    },
    {
      "analysisTarget": "2345.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'changeable' is never reassigned. Use 'const' instead.",
      "hintAdded": false,
      "message": "'changeable' is never reassigned. Use 'const' instead.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 11,
        "endLine": 6,
        "startColumn": 1,
        "startLine": 6,
      },
      "nodeText": "",
      "ruleId": "prefer-const",
      "type": 1,
    },
    {
      "analysisTarget": "6133.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'_defined_param' is defined but never used.",
      "hintAdded": false,
      "message": "'_defined_param' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 61,
        "endLine": 5,
        "startColumn": 39,
        "startLine": 5,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "6133.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'_defined_param' is defined but never used.",
      "hintAdded": false,
      "message": "'_defined_param' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 61,
        "endLine": 5,
        "startColumn": 39,
        "startLine": 5,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "module.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'module' is not defined.",
      "hintAdded": false,
      "message": "'module' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 7,
        "endLine": 5,
        "startColumn": 1,
        "startLine": 5,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'NonExistingElement'.",
      "hintAdded": true,
      "message": "Cannot find name 'NonExistingElement'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 39,
        "endLine": 7,
        "startColumn": 21,
        "startLine": 7,
      },
      "nodeText": "NonExistingElement",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'NonExistingElement'.",
      "hintAdded": true,
      "message": "Cannot find name 'NonExistingElement'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 26,
        "endLine": 15,
        "startColumn": 8,
        "startLine": 15,
      },
      "nodeText": "NonExistingElement",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "Type 'notExistingVariable: any' is being returned or assigned, but type 'ReactNode' is expected. Please convert type 'notExistingVariable: any' to type 'ReactNode', or return or assign a variable of type 'ReactNode'",
      "hintAdded": true,
      "message": "Type '{ $notExistingVariable: any; }' is not assignable to type 'ReactNode'..   Object literal may only specify known properties, and '$notExistingVariable' does not exist in type 'ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal'.",
      "nodeKind": "ShorthandPropertyAssignment",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 17,
        "startColumn": 13,
        "startLine": 17,
      },
      "nodeText": "$notExistingVariable",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2740",
      "hint": "Type 'ReactElement<any, any>' is missing the following properties from type 'Element': attributes, classList, className, clientHeight, and 163 more.",
      "hintAdded": true,
      "message": "Type 'ReactElement<any, any>' is missing the following properties from type 'Element': attributes, classList, className, clientHeight, and 163 more.",
      "nodeKind": "ReturnStatement",
      "nodeLocation": {
        "endColumn": 34,
        "endLine": 24,
        "startColumn": 3,
        "startLine": 24,
      },
      "nodeText": "return <NonExistingFragment />;",
      "ruleId": "TS2740",
      "type": 0,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "The function expects to return 'Element', but 'JSX.Element' is returned. Please convert 'JSX.Element' value to 'Element' or update the function's return type.",
      "hintAdded": true,
      "message": "Type 'JSX.Element' is not assignable to type 'Element'.",
      "nodeKind": "ReturnStatement",
      "nodeLocation": {
        "endColumn": 60,
        "endLine": 31,
        "startColumn": 3,
        "startLine": 31,
      },
      "nodeText": "return someBoolean ? <br doesNotExist=\\"fail\\" /> : <br />;",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "Unexpected empty function 'test'.",
      "hintAdded": false,
      "message": "Unexpected empty function 'test'.",
      "nodeKind": "FunctionDeclaration",
      "nodeLocation": {
        "endColumn": 32,
        "endLine": 3,
        "startColumn": 30,
        "startLine": 3,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-empty-function",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'Element' is not defined.",
      "hintAdded": false,
      "message": "'Element' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 37,
        "endLine": 5,
        "startColumn": 30,
        "startLine": 5,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'NonExistingElement' is not defined.",
      "hintAdded": false,
      "message": "'NonExistingElement' is not defined.",
      "nodeKind": "JSXIdentifier",
      "nodeLocation": {
        "endColumn": 39,
        "endLine": 7,
        "startColumn": 21,
        "startLine": 7,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'NonExistingElement' is not defined.",
      "hintAdded": false,
      "message": "'NonExistingElement' is not defined.",
      "nodeKind": "JSXIdentifier",
      "nodeLocation": {
        "endColumn": 26,
        "endLine": 15,
        "startColumn": 8,
        "startLine": 15,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'$notExistingVariable' is not defined.",
      "hintAdded": false,
      "message": "'$notExistingVariable' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 17,
        "startColumn": 13,
        "startLine": 17,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'NonExistingFragment' is not defined.",
      "hintAdded": false,
      "message": "'NonExistingFragment' is not defined.",
      "nodeKind": "JSXIdentifier",
      "nodeLocation": {
        "endColumn": 30,
        "endLine": 24,
        "startColumn": 11,
        "startLine": 24,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-processed.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'Element' is not defined.",
      "hintAdded": false,
      "message": "'Element' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 27,
        "startColumn": 26,
        "startLine": 27,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react-xx.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2355",
      "hint": "A function whose declared type is neither 'void' nor 'any' must return a value.",
      "hintAdded": true,
      "message": "A function whose declared type is neither 'void' nor 'any' must return a value.",
      "nodeKind": "TypeReference",
      "nodeLocation": {
        "endColumn": 55,
        "endLine": 28,
        "startColumn": 40,
        "startLine": 28,
      },
      "nodeText": "Promise<string>",
      "ruleId": "TS2355",
      "type": 0,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'NonExistingElement'.",
      "hintAdded": true,
      "message": "Cannot find name 'NonExistingElement'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 39,
        "endLine": 7,
        "startColumn": 21,
        "startLine": 7,
      },
      "nodeText": "NonExistingElement",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'NonExistingElement'.",
      "hintAdded": true,
      "message": "Cannot find name 'NonExistingElement'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 26,
        "endLine": 15,
        "startColumn": 8,
        "startLine": 15,
      },
      "nodeText": "NonExistingElement",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "Type 'notExistingVariable: any' is being returned or assigned, but type 'ReactNode' is expected. Please convert type 'notExistingVariable: any' to type 'ReactNode', or return or assign a variable of type 'ReactNode'",
      "hintAdded": true,
      "message": "Type '{ $notExistingVariable: any; }' is not assignable to type 'ReactNode'..   Object literal may only specify known properties, and '$notExistingVariable' does not exist in type 'ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal'.",
      "nodeKind": "ShorthandPropertyAssignment",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 17,
        "startColumn": 13,
        "startLine": 17,
      },
      "nodeText": "$notExistingVariable",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2740",
      "hint": "Type 'ReactElement<any, any>' is missing the following properties from type 'Element': attributes, classList, className, clientHeight, and 163 more.",
      "hintAdded": true,
      "message": "Type 'ReactElement<any, any>' is missing the following properties from type 'Element': attributes, classList, className, clientHeight, and 163 more.",
      "nodeKind": "ReturnStatement",
      "nodeLocation": {
        "endColumn": 34,
        "endLine": 24,
        "startColumn": 3,
        "startLine": 24,
      },
      "nodeText": "return <NonExistingFragment />;",
      "ruleId": "TS2740",
      "type": 0,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/72139358/ts2322-type-typeof-statusenum-is-not-assignable-to-type-statusenum",
      "hint": "The function expects to return 'Element', but 'JSX.Element' is returned. Please convert 'JSX.Element' value to 'Element' or update the function's return type.",
      "hintAdded": true,
      "message": "Type 'JSX.Element' is not assignable to type 'Element'.",
      "nodeKind": "ReturnStatement",
      "nodeLocation": {
        "endColumn": 60,
        "endLine": 31,
        "startColumn": 3,
        "startLine": 31,
      },
      "nodeText": "return someBoolean ? <br doesNotExist=\\"fail\\" /> : <br />;",
      "ruleId": "TS2322",
      "type": 0,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "Unexpected empty function 'test'.",
      "hintAdded": false,
      "message": "Unexpected empty function 'test'.",
      "nodeKind": "FunctionDeclaration",
      "nodeLocation": {
        "endColumn": 32,
        "endLine": 3,
        "startColumn": 30,
        "startLine": 3,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-empty-function",
      "type": 1,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'Element' is not defined.",
      "hintAdded": false,
      "message": "'Element' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 37,
        "endLine": 5,
        "startColumn": 30,
        "startLine": 5,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'NonExistingElement' is not defined.",
      "hintAdded": false,
      "message": "'NonExistingElement' is not defined.",
      "nodeKind": "JSXIdentifier",
      "nodeLocation": {
        "endColumn": 39,
        "endLine": 7,
        "startColumn": 21,
        "startLine": 7,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'NonExistingElement' is not defined.",
      "hintAdded": false,
      "message": "'NonExistingElement' is not defined.",
      "nodeKind": "JSXIdentifier",
      "nodeLocation": {
        "endColumn": 26,
        "endLine": 15,
        "startColumn": 8,
        "startLine": 15,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'$notExistingVariable' is not defined.",
      "hintAdded": false,
      "message": "'$notExistingVariable' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 17,
        "startColumn": 13,
        "startLine": 17,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'NonExistingFragment' is not defined.",
      "hintAdded": false,
      "message": "'NonExistingFragment' is not defined.",
      "nodeKind": "JSXIdentifier",
      "nodeLocation": {
        "endColumn": 30,
        "endLine": 24,
        "startColumn": 11,
        "startLine": 24,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "react.tsx",
      "category": "Error",
      "helpUrl": "",
      "hint": "'Element' is not defined.",
      "hintAdded": false,
      "message": "'Element' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 27,
        "startColumn": 26,
        "startLine": 27,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "template-literal.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2339",
      "hint": "Property 'one' does not exist on type 'object'.",
      "hintAdded": true,
      "message": "Property 'one' does not exist on type 'object'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 34,
        "endLine": 7,
        "startColumn": 31,
        "startLine": 7,
      },
      "nodeText": "one",
      "ruleId": "TS2339",
      "type": 0,
    },
    {
      "analysisTarget": "template-literal.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2339",
      "hint": "Property 'two' does not exist on type 'object'.",
      "hintAdded": true,
      "message": "Property 'two' does not exist on type 'object'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 34,
        "endLine": 13,
        "startColumn": 31,
        "startLine": 13,
      },
      "nodeText": "two",
      "ruleId": "TS2339",
      "type": 0,
    },
    {
      "analysisTarget": "template-literal.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2339",
      "hint": "Property 'three' does not exist on type 'object'.",
      "hintAdded": true,
      "message": "Property 'three' does not exist on type 'object'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 36,
        "endLine": 19,
        "startColumn": 31,
        "startLine": 19,
      },
      "nodeText": "three",
      "ruleId": "TS2339",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 48,
        "endLine": 6,
        "startColumn": 47,
        "startLine": 6,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 59,
        "endLine": 15,
        "startColumn": 58,
        "startLine": 15,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 70,
        "endLine": 34,
        "startColumn": 69,
        "startLine": 34,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 62,
        "endLine": 44,
        "startColumn": 61,
        "startLine": 44,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'args' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'args' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 54,
        "startColumn": 29,
        "startLine": 54,
      },
      "nodeText": "args",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'handler' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'handler' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 45,
        "endLine": 65,
        "startColumn": 38,
        "startLine": 65,
      },
      "nodeText": "handler",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-any.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'model' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'model' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 35,
        "endLine": 72,
        "startColumn": 30,
        "startLine": 72,
      },
      "nodeText": "model",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'whereAmI'.",
      "hintAdded": true,
      "message": "Cannot find name 'whereAmI'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 18,
        "endLine": 5,
        "startColumn": 10,
        "startLine": 5,
      },
      "nodeText": "whereAmI",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'missingVar'.",
      "hintAdded": true,
      "message": "Cannot find name 'missingVar'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 32,
        "endLine": 13,
        "startColumn": 22,
        "startLine": 13,
      },
      "nodeText": "missingVar",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'missingVar'.",
      "hintAdded": true,
      "message": "Cannot find name 'missingVar'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 17,
        "endLine": 21,
        "startColumn": 7,
        "startLine": 21,
      },
      "nodeText": "missingVar",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'.",
      "hintAdded": true,
      "message": "Cannot find name 'missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 97,
        "endLine": 23,
        "startColumn": 7,
        "startLine": 23,
      },
      "nodeText": "missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2304",
      "hint": "Cannot find name 'timestamp'.",
      "hintAdded": true,
      "message": "Cannot find name 'timestamp'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 10,
        "endLine": 28,
        "startColumn": 1,
        "startLine": 28,
      },
      "nodeText": "timestamp",
      "ruleId": "TS2304",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2306",
      "hint": "File './module.ts' is not a module.",
      "hintAdded": true,
      "message": "File './module.ts' is not a module.",
      "nodeKind": "StringLiteral",
      "nodeLocation": {
        "endColumn": 34,
        "endLine": 31,
        "startColumn": 24,
        "startLine": 31,
      },
      "nodeText": "\\"./module\\"",
      "ruleId": "TS2306",
      "type": 0,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'whereAmI' is not defined.",
      "hintAdded": false,
      "message": "'whereAmI' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 18,
        "endLine": 5,
        "startColumn": 10,
        "startLine": 5,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'missingVar' is not defined.",
      "hintAdded": false,
      "message": "'missingVar' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 32,
        "endLine": 13,
        "startColumn": 22,
        "startLine": 13,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'missingVar' is not defined.",
      "hintAdded": false,
      "message": "'missingVar' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 17,
        "endLine": 21,
        "startColumn": 7,
        "startLine": 21,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' is not defined.",
      "hintAdded": false,
      "message": "'missingVarAsWellButThisTimeWeUseVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 97,
        "endLine": 23,
        "startColumn": 7,
        "startLine": 23,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "ts-errors.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'timestamp' is not defined.",
      "hintAdded": false,
      "message": "'timestamp' is not defined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 10,
        "endLine": 28,
        "startColumn": 1,
        "startLine": 28,
      },
      "nodeText": "",
      "ruleId": "no-undef",
      "type": 1,
    },
    {
      "analysisTarget": "ts-multiline-hint.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/42421501/error-ts2345-argument-of-type-t-is-not-assignable-to-parameter-of-type-objec",
      "hint": "Argument of type 'string, number] | undefined' is not assignable to parameter of type 'string, number'. Consider verifying both types, using type assertion: '(
        orderedBreakpointsLongNameConstant.find(([key]) => key === size) as string)', or using type guard: 'if (
        orderedBreakpointsLongNameConstant.find(([key]) => key === size) instanceof string) { ... }'.",
      "hintAdded": true,
      "message": "Argument of type '[string, number] | undefined' is not assignable to parameter of type '[string, number]'..   Type 'undefined' is not assignable to type '[string, number]'.",
      "nodeKind": "CallExpression",
      "nodeLocation": {
        "endColumn": 73,
        "endLine": 40,
        "startColumn": 9,
        "startLine": 40,
      },
      "nodeText": "orderedBreakpointsLongNameConstant.find(([key]) => key === size)",
      "ruleId": "TS2345",
      "type": 0,
    },
    {
      "analysisTarget": "ts-multiline-hint.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2532",
      "hint": "Object is possibly 'undefined'.",
      "hintAdded": true,
      "message": "Object is possibly 'undefined'.",
      "nodeKind": "PropertyAccessExpression",
      "nodeLocation": {
        "endColumn": 27,
        "endLine": 45,
        "startColumn": 9,
        "startLine": 45,
      },
      "nodeText": "this.viewportWidth",
      "ruleId": "TS2532",
      "type": 0,
    },
    {
      "analysisTarget": "ts-multiline-hint.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2532",
      "hint": "Object is possibly 'undefined'.",
      "hintAdded": true,
      "message": "Object is possibly 'undefined'.",
      "nodeKind": "PropertyAccessExpression",
      "nodeLocation": {
        "endColumn": 30,
        "endLine": 69,
        "startColumn": 12,
        "startLine": 69,
      },
      "nodeText": "this.viewportWidth",
      "ruleId": "TS2532",
      "type": 0,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts7034",
      "hint": "Variable 'emtpy' implicitly has type 'any[]' in some locations where its type cannot be determined.",
      "hintAdded": true,
      "message": "Variable 'emtpy' implicitly has type 'any[]' in some locations where its type cannot be determined.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 14,
        "endLine": 3,
        "startColumn": 9,
        "startLine": 3,
      },
      "nodeText": "emtpy",
      "ruleId": "TS7034",
      "type": 0,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/42421501/error-ts2345-argument-of-type-t-is-not-assignable-to-parameter-of-type-objec",
      "hint": "Argument of type 'any' is not assignable to parameter of type 'never'. Consider verifying both types, using type assertion: '(emtpy as string)', or using type guard: 'if (emtpy instanceof string) { ... }'.",
      "hintAdded": true,
      "message": "Argument of type 'any[]' is not assignable to parameter of type 'never[]'..   Type 'any' is not assignable to type 'never'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 14,
        "endLine": 5,
        "startColumn": 9,
        "startLine": 5,
      },
      "nodeText": "emtpy",
      "ruleId": "TS2345",
      "type": 0,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/42421501/error-ts2345-argument-of-type-t-is-not-assignable-to-parameter-of-type-objec",
      "hint": "Argument of type 'string' is not assignable to parameter of type 'never'. Consider verifying both types, using type assertion: '(fiz as string)', or using type guard: 'if (fiz instanceof string) { ... }'.",
      "hintAdded": true,
      "message": "Argument of type 'string[]' is not assignable to parameter of type 'never[]'..   Type 'string' is not assignable to type 'never'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 10,
        "endLine": 12,
        "startColumn": 7,
        "startLine": 12,
      },
      "nodeText": "fiz",
      "ruleId": "TS2345",
      "type": 0,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'bar' is defined but never used.",
      "hintAdded": false,
      "message": "'bar' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 13,
        "endLine": 1,
        "startColumn": 10,
        "startLine": 1,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'bar' is defined but never used.",
      "hintAdded": false,
      "message": "'bar' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 13,
        "endLine": 1,
        "startColumn": 10,
        "startLine": 1,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'_bar' is assigned a value but never used.",
      "hintAdded": false,
      "message": "'_bar' is assigned a value but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 20,
        "endLine": 8,
        "startColumn": 16,
        "startLine": 8,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'_bar' is assigned a value but never used.",
      "hintAdded": false,
      "message": "'_bar' is assigned a value but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 20,
        "endLine": 8,
        "startColumn": 16,
        "startLine": 8,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'_bar' is assigned a value but never used.",
      "hintAdded": false,
      "message": "'_bar' is assigned a value but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 18,
        "endLine": 15,
        "startColumn": 14,
        "startLine": 15,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'_bar' is assigned a value but never used.",
      "hintAdded": false,
      "message": "'_bar' is assigned a value but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 18,
        "endLine": 15,
        "startColumn": 14,
        "startLine": 15,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-never.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "Unexpected empty function 'baz'.",
      "hintAdded": false,
      "message": "Unexpected empty function 'baz'.",
      "nodeKind": "FunctionDeclaration",
      "nodeLocation": {
        "endColumn": 33,
        "endLine": 15,
        "startColumn": 31,
        "startLine": 15,
      },
      "nodeText": "",
      "ruleId": "@typescript-eslint/no-empty-function",
      "type": 1,
    },
    {
      "analysisTarget": "ts-object.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 51,
        "endLine": 6,
        "startColumn": 50,
        "startLine": 6,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-object.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 62,
        "endLine": 15,
        "startColumn": 61,
        "startLine": 15,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-object.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'b' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'b' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 76,
        "endLine": 25,
        "startColumn": 75,
        "startLine": 25,
      },
      "nodeText": "b",
      "ruleId": "TS7006",
      "type": 0,
    },
    {
      "analysisTarget": "ts-processed.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts18046",
      "hint": "'e' is of type 'unknown'.",
      "hintAdded": true,
      "message": "'e' is of type 'unknown'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 20,
        "startColumn": 15,
        "startLine": 20,
      },
      "nodeText": "e",
      "ruleId": "TS18046",
      "type": 0,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2416",
      "hint": "Property 'boo' in type 'MultipleImpl' is not assignable to the same property in base type 'MultipleClass'..  Type '(ab: any, b?: any) => boolean' is not assignable to type '{ (a: number): number; (b: string): string; (a: number, b: string): boolean; }'..    Type 'boolean' is not assignable to type 'number'.",
      "hintAdded": true,
      "message": "Property 'boo' in type 'MultipleImpl' is not assignable to the same property in base type 'MultipleClass'..   Type '(ab: any, b?: any) => boolean' is not assignable to type '{ (a: number): number; (b: string): string; (a: number, b: string): boolean; }'..     Type 'boolean' is not assignable to type 'number'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 6,
        "endLine": 169,
        "startColumn": 3,
        "startLine": 169,
      },
      "nodeText": "boo",
      "ruleId": "TS2416",
      "type": 0,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/search?tab=votes&q=ts2416",
      "hint": "Property 'foo' in type 'MultipleImpl' is not assignable to the same property in base type 'MultipleInterface'..  Type '(ab: any, b?: any) => boolean' is not assignable to type '{ (a: number): number; (b: string): string; (a: number, b: string): boolean; }'..    Type 'boolean' is not assignable to type 'number'.",
      "hintAdded": true,
      "message": "Property 'foo' in type 'MultipleImpl' is not assignable to the same property in base type 'MultipleInterface'..   Type '(ab: any, b?: any) => boolean' is not assignable to type '{ (a: number): number; (b: string): string; (a: number, b: string): boolean; }'..     Type 'boolean' is not assignable to type 'number'.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 6,
        "endLine": 174,
        "startColumn": 3,
        "startLine": 174,
      },
      "nodeText": "foo",
      "ruleId": "TS2416",
      "type": 0,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'place' is defined but never used.",
      "hintAdded": false,
      "message": "'place' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 21,
        "endLine": 21,
        "startColumn": 8,
        "startLine": 21,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'num' is defined but never used.",
      "hintAdded": false,
      "message": "'num' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 20,
        "endLine": 25,
        "startColumn": 9,
        "startLine": 25,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'a' is defined but never used.",
      "hintAdded": false,
      "message": "'a' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 13,
        "endLine": 84,
        "startColumn": 9,
        "startLine": 84,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'b' is defined but never used.",
      "hintAdded": false,
      "message": "'b' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 19,
        "endLine": 84,
        "startColumn": 15,
        "startLine": 84,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'c' is defined but never used.",
      "hintAdded": false,
      "message": "'c' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 13,
        "endLine": 88,
        "startColumn": 9,
        "startLine": 88,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'a' is defined but never used.",
      "hintAdded": false,
      "message": "'a' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 151,
        "startColumn": 7,
        "startLine": 151,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'b' is defined but never used.",
      "hintAdded": false,
      "message": "'b' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 152,
        "startColumn": 7,
        "startLine": 152,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'a' is defined but never used.",
      "hintAdded": false,
      "message": "'a' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 153,
        "startColumn": 7,
        "startLine": 153,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'b' is defined but never used.",
      "hintAdded": false,
      "message": "'b' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 27,
        "endLine": 153,
        "startColumn": 18,
        "startLine": 153,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'a' is defined but never used.",
      "hintAdded": false,
      "message": "'a' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 155,
        "startColumn": 7,
        "startLine": 155,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'a' is defined but never used.",
      "hintAdded": false,
      "message": "'a' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 159,
        "startColumn": 7,
        "startLine": 159,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "Duplicate name 'boo'.",
      "hintAdded": false,
      "message": "Duplicate name 'boo'.",
      "nodeKind": "MethodDefinition",
      "nodeLocation": {
        "endColumn": 26,
        "endLine": 160,
        "startColumn": 3,
        "startLine": 160,
      },
      "nodeText": "",
      "ruleId": "no-dupe-class-members",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'b' is defined but never used.",
      "hintAdded": false,
      "message": "'b' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 160,
        "startColumn": 7,
        "startLine": 160,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "Duplicate name 'boo'.",
      "hintAdded": false,
      "message": "Duplicate name 'boo'.",
      "nodeKind": "MethodDefinition",
      "nodeLocation": {
        "endColumn": 38,
        "endLine": 161,
        "startColumn": 3,
        "startLine": 161,
      },
      "nodeText": "",
      "ruleId": "no-dupe-class-members",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'a' is defined but never used.",
      "hintAdded": false,
      "message": "'a' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 16,
        "endLine": 161,
        "startColumn": 7,
        "startLine": 161,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "'b' is defined but never used.",
      "hintAdded": false,
      "message": "'b' is defined but never used.",
      "nodeKind": "Identifier",
      "nodeLocation": {
        "endColumn": 27,
        "endLine": 161,
        "startColumn": 18,
        "startLine": 161,
      },
      "nodeText": "",
      "ruleId": "no-unused-vars",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types-extends.ts",
      "category": "Error",
      "helpUrl": "",
      "hint": "Duplicate name 'boo'.",
      "hintAdded": false,
      "message": "Duplicate name 'boo'.",
      "nodeKind": "MethodDefinition",
      "nodeLocation": {
        "endColumn": 4,
        "endLine": 162,
        "startColumn": 3,
        "startLine": 162,
      },
      "nodeText": "",
      "ruleId": "no-dupe-class-members",
      "type": 1,
    },
    {
      "analysisTarget": "ts-types.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/42421501/error-ts2345-argument-of-type-t-is-not-assignable-to-parameter-of-type-objec",
      "hint": "Argument of type 'string' is not assignable to parameter of type 'number'. Consider verifying both types, using type assertion: '(\\"O\\" as string)', or using type guard: 'if (\\"O\\" instanceof string) { ... }'.",
      "hintAdded": true,
      "message": "Argument of type 'string' is not assignable to parameter of type 'number'.",
      "nodeKind": "StringLiteral",
      "nodeLocation": {
        "endColumn": 10,
        "endLine": 28,
        "startColumn": 7,
        "startLine": 28,
      },
      "nodeText": "\\"O\\"",
      "ruleId": "TS2345",
      "type": 0,
    },
    {
      "analysisTarget": "ts-types.ts",
      "category": "Error",
      "helpUrl": "https://stackoverflow.com/questions/43064221/typescript-ts7006-parameter-xxx-implicitly-has-an-any-type",
      "hint": "Parameter 'c' implicitly has an 'any' type.",
      "hintAdded": true,
      "message": "Parameter 'c' implicitly has an 'any' type.",
      "nodeKind": "Parameter",
      "nodeLocation": {
        "endColumn": 55,
        "endLine": 74,
        "startColumn": 54,
        "startLine": 74,
      },
      "nodeText": "c",
      "ruleId": "TS7006",
      "type": 0,
    },
  ],
  "summary": [
    {
      "basePath": "",
      "commandName": "@rehearsal/upgrade",
      "entrypoint": "",
      "projectName": "@rehearsal/test",
      "timestamp": "9/22/2022, 13:48:38",
      "tsVersion": "",
    },
  ],
}
`;
