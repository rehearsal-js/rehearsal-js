export function test1(me) {
  return 'This is ' + me;
}

test1('test');

/**
 * JSDoc
 * @param {number} me
 * @return {string}
 */
export function test2(me) {
  return me.toString();
}

test2(0);

/**
 * JSDoc is ignored
 * @param {number} me
 * @return {string}
 */
export function test3(me) {
  return me.toString();
}

/* @ts-expect-error @rehearsal TODO TS2345: Argument of type 'string' is not assignable to parameter of type 'number'. Consider verifying both types, using type assertion: '('O' as string)', or using type guard: 'if ('O' instanceof string) { ... }'. */
test3('O');

export class A {
  /**
   * JSDoc
   * @param {number} me
   * @return {string}
   */
  test4(me) {
    return me.toString(2);
  }
}

export class Foo {
  value = 0;

  get foo() {
    return this.value;
  }

  set foo(value) {
    this.value = value;
  }

  boo(value) {
    this.value = value;

    if (this.value) {
      return null;
    } else {
      return this.value;
    }
  }
}

class GenericClass<something = number, somethingElse = number> {
  thing(a: something, b: somethingElse) {
    console.log(a, b);
  }
}

/**
 * JSDoc
 *
 * @param {number} a                                //
 * @param {(string|number)} b                       // ParenthesizedType.type => UnionType
 * @param {Foo} c                                   // TypeReference
 * @param {number|UnavailableType} d                // UnionType
 * @param {() => boolean} e                         // FunctionType
 * @param {GenericClass<string, string>} f          // TypeReference

 * @param {<callbackFunction>} g                    // FunctionType

 * @param {UnavailableType} h                       // TypeReference
 * @param {Foo|UnavailableType} i                   // UnionType
 * @param {() => UnavailableType} j                 // FunctionType
 * @param {GenericClass<string, UnavailableType>} k // TypeReference
 * @param {number|() => UnavailableType} l          // UnionType
 * @param {(a: UnavailableType) => void} m          // FunctionType
 * @param {(a, b: string) => void} n                // FunctionType

 * @param {GenericClass<string, string, string>} o  // TypeReference... 3 args instead of 2

 * @return {void}
 */
export function think(a, b, c, d, e, f, g, h, i ,j, k, l, m, n, o, p) {
  return console.log(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
}
