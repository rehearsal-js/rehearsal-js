// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fix > .gts > component signature codefix > add component signature interface 1`] = `
"import Component from \\"@glimmer/component\\";

export interface WithMissingInterfaceSignature {
  Args: {};
}

export default class WithMissingInterface extends Component<WithMissingInterfaceSignature> {
  name = \\"Bob\\";

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
    <span>My favorite snack is {{@snack}}.</span>
  </template>
}
"
`;

exports[`fix > .gts > component signature codefix > adds \`Args\` property to component signature interface 1`] = `
"import Component from \\"@glimmer/component\\";

export interface WithMissingPropertySignature {
  Args: {};
}

export default class WithMissingProperty extends Component<WithMissingPropertySignature> {
  name = \\"Bob\\";

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
    <span>My favorite snack is {{@snack}}.</span>
  </template>
}
"
`;

exports[`fix > .gts > component signature codefix > adds missing args to Args to component signature interface 1`] = `
"import Component from \\"@glimmer/component\\";

//
// UseCase: Should update type reference with all args
//

interface FooSignature {
  Args: FooArgs;
}

interface FooArgs {
  snack: any;
  age: any;
}

export class Foo extends Component<FooSignature> {
  <template>
    {{@age}} {{@snack}}
  </template>
}

//
// UseCase: Should add a single arg to the args interface
//

interface BarSignature {
  Args: BarArgs;
}

interface BarArgs {
  snack: any;
  age: number;
}

export class SomeComponent extends Component<BarSignature> {
  <template>
    {{@age}} {{@snack}}
  </template>
}

export interface InferMultipleArgsSignature {
  Args: { snack: any; beverage: any };
}

//
// UseCase: Should add usage of this.args to the args interface
//

export class InferMultipleArgs extends Component<InferMultipleArgsSignature> {
  get drink() {
    return this.args.beverage;
  }

  <template>
    <span>My favorite snack is {{@snack}}.</span>
    <span>My favorite drink is {{this.drink}}.</span>
  </template>
}

//
// UseCase: Should update object literal
//

export interface BazSignature {
  Args: { snack: any; age: any };
}

export default class Baz extends Component<BazSignature> {
  <template>
    {{@age}} {{@snack}}
  </template>
}
"
`;

exports[`fix > .gts > component signature codefix > mode: drain should apply all code fixes 1`] = `
"import Component from \\"@glimmer/component\\";

export interface WithMissingInterfaceSignature {
  Args: { snack: any; age: any };
}

export default class WithMissingInterface extends Component<WithMissingInterfaceSignature> {
  name = \\"Bob\\";

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
    <span>My favorite snack is {{@snack}}.</span>
  </template>
}
"
`;

exports[`fix > .gts > component signature codefix > with typedef for component signature interface 1`] = `
"import Component from \\"@glimmer/component\\";

export interface RepeatSignature {
  Args: { phrase: any };
}

//
// UseCase: Should generate a component signature interface
//

export class Repeat extends Component<RepeatSignature> {
  <template>
    <span>{{@phrase}}</span>
  </template>
}

//
// UseCase: Should infer relationship from comment, update heritage clause with signature
//

interface MyComponentSignature {
  Args: { snack: any; age: any };
}

/**
 * @extends {Component<MyComponentSignature>}
 */
export class MyComponent extends Component<MyComponentSignature> {
  name = \\"Bob\\";

  <template>
    <Repeat @phrase={{@age}} />
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
    <span>My favorite snack is {{@snack}}.</span>
  </template>
}

//
// UseCase: Should generate an interface from all comments
//

interface InterfaceFromCommentSignature {
  Args: InterfaceFromCommentArgs;
}

interface InterfaceFromCommentArgs {
  someArg: number;
}

/**
 * @extends {Component<InterfaceFromCommentSignature>}
 */
export class Something extends Component<InterfaceFromCommentSignature> {
  <template>
    <span>{{@someArg}}</span>
  </template>
}
"
`;

exports[`fix > .gts > still fixes the file if there are no errors 1`] = `
"import Component from \\"@glimmer/component\\";

export default class TestGjsNoErrors extends Component {
  name = \\"world\\";

  <template>
    <span>Hello, I am {{this.name}}!</span>
  </template>
}
"
`;

exports[`fix > .gts > strips jsdoc param with missing name 1`] = `
"import Component from \\"@glimmer/component\\";

export interface SomethingSignature {
  Args: { age: any };
}

export class Something extends Component<SomethingSignature> {
  /** */
  // @ts-expect-error @rehearsal TODO TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
  reset(...args): void {
    console.log(args);
  }

  shouldExist(): void {
    console.log(\\"should exist in output\\");
  }

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > strips jsdoc param with missing name 2`] = `
"import Component from \\"@glimmer/component\\";

export interface SomethingSignature {
  Args: { age: any };
}

export class Something extends Component<SomethingSignature> {
  /** */

  // @ts-expect-error @rehearsal TODO TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
  reset(...args): void {
    console.log(args);
  }

  shouldExist(): void {
    console.log(\\"should exist in output\\");
  }

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > when missing a local prop 1`] = `
"import Component from \\"@glimmer/component\\";

export interface TestMissingLocalPropGtsSignature {
  Args: {};
}

export default class TestMissingLocalPropGts extends Component<TestMissingLocalPropGtsSignature> {
  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > with bare template 1`] = `
"<template>
  <span>Hello, {{@name}}!</span>

  {{#if @someCondition}}
    <div>true!</div>
  {{/if}}
</template>
"
`;

exports[`fix > .gts > with class 1`] = `
"import Component from \\"@glimmer/component\\";

export interface HelloSignature {
  Args: {};
}

export default class Hello extends Component<HelloSignature> {
  name = \\"world\\";

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > with errors 1`] = `
"import Component from \\"@glimmer/component\\";

export interface HelloSignature {
  Args: {};
}

export default class Hello extends Component<HelloSignature> {
  name = \\"world\\";

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > with more errors 1`] = `
"// @ts-expect-error @rehearsal TODO TS2345: Argument of type 'typeof MyComponent' is not assignable to parameter of type 'abstract new () => HasContext<AnyContext'.
export default class MyComponent {
  missingParamTypes(a: number, b: number): void {
    a = 1;
    b = 2;
  }

  containsUnsupportedDiagnostic(): () => void {
    return function () {
      // @ts-expect-error @rehearsal TODO TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      console.log(this);
    }.bind(this);
  }
}
"
`;

exports[`fix > .gts > with non-qualified service 1`] = `
"import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export interface TestWithNonQualifiedServiceSignature {
  Args: {};
}

export default class TestWithNonQualifiedService extends Component<TestWithNonQualifiedServiceSignature> {
  // @ts-expect-error @rehearsal TODO TS7008: Member 'authenticatedUser' implicitly has an 'any' type.
  @service(\\"authenticated-user\\") authenticatedUser;

  name = \\"world\\";

  <template>
    <span>Hello, I am {{this.authenticatedUser}} and I am {{@age}} years old.</span>
  </template>
}
"
`;

exports[`fix > .gts > with qualified service 1`] = `
"import type AuthenticatedUser from \\"authentication/services/authenticated-user\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export interface TestWithQualifiedServiceGtsSignature {
  Args: {};
}

export default class TestWithQualifiedServiceGts extends Component<TestWithQualifiedServiceGtsSignature> {
  @service(\\"authentication@authenticated-user\\")
  declare authenticatedUser: AuthenticatedUser;

  name = \\"world\\";

  <template>
    <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > with service map 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'services/moo/moo' or its corresponding type declarations.
import type MooService from \\"services/moo/moo\\";
import type GooService from \\"services/goo\\";
// @ts-expect-error @rehearsal TODO TS2307: Cannot find module '@some-org/some-package/services/from-service-map' or its corresponding type declarations.
import type Mapped from \\"@some-org/some-package/services/from-service-map\\";
import type BooService from \\"boo/services/boo-service\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class TestWithMappedServiceGts extends Component {
  @service(\\"boo-service\\")
  declare booService: BooService;

  @service(\\"@some-org/some-package@mapped\\")
  declare something: Mapped;

  @service()
  declare gooService: GooService;

  @service
  declare mooService: MooService;

  <template>
    <span>Hello, I am human, and I am 10 years old!</span>
  </template>
}
"
`;

exports[`fix > .gts > with template assigned to variable 1`] = `
"// @ts-expect-error @rehearsal TODO TS2339: Property 'name' does not exist on type '{}'.
const Hello = <template><span>Hello, {{@name}}!</span></template>;
"
`;

exports[`fix > .hbs > more involved class 1`] = `"<span>Hello {{this.name}}</span>"`;

exports[`fix > .hbs > more involved class 2`] = `
"import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class Salutation extends Component {
  // @ts-expect-error @rehearsal TODO TS2564: Property 'locale' has no initializer and is not definitely assigned in the constructor.
  @service locale: { current: () => string };
  get name() {
    if (this.locale.current() == \\"en-US\\") {
      return \\"Bob\\";
    }
    return \\"Unknown\\";
  }
}
"
`;

exports[`fix > .hbs > simple class 1`] = `"<span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>"`;

exports[`fix > .hbs > simple class 2`] = `
"import Component from \\"@glimmer/component\\";

export default class Foo extends Component {}
"
`;

exports[`fix > .hbs > template only 1`] = `"Hello!"`;

exports[`fix > .ts > class with missing prop 1`] = `
"class Foo {
  hello() {
    // @ts-expect-error @rehearsal TODO TS2339: Property 'name' does not exist on type 'Foo'.
    return this.name;
  }
}
"
`;

exports[`fix > .ts > glimmerx inline hbs 1`] = `
"import Component, { hbs } from \\"@glimmerx/component\\";

export default class HelloWorld extends Component {
  name = \\"world\\";

  static template = hbs\`
  <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
\`;
}
"
`;

exports[`fix > .ts > inline hbs in tests 1`] = `
"import \\"qunit-dom\\";
import { render } from \\"@ember/test-helpers\\";
import { hbs } from \\"ember-cli-htmlbars\\";
import { setupRenderingTest } from \\"ember-qunit\\";
import { module, test } from \\"qunit\\";

module(\\"Integration | Helper | grid-list\\", function (hooks) {
  setupRenderingTest(hooks);

  test(\\"it sets and changes the columns classes\\", async function (assert) {
    this.set(\\"styles\\", \\"foo\\");
    // @ts-expect-error @rehearsal TODO TS2339: Property 'styles' does not exist on type 'void'.
    await render(hbs\`<ul data-test-el class=\\"{{this.styles}}\\">foo</ul>\`);

    this.set(\\"styles\\", \\"foo\\");
    assert.dom(\\"[data-test-el]\\").hasClass(\\"some-class\\", \\"has the border class\\");

    await render(hbs\`<Map
      @lat={{this.lat}}
      @lng={{this.lng}}
      @zoom={{this.zoom}}
      @width={{this.width}}
      @height={{this.height}}
    />\`);

    this.set(\\"styles\\", \\"foo\\");
    assert.dom(\\"[data-test-el]\\").hasClass(\\"some-class\\", \\"has the border class\\");

    this.set(\\"styles\\", \\"foo\\");
    assert.dom(\\"[data-test-el]\\").hasClass(\\"some-class\\", \\"has the border class\\");
  });
});
"
`;

exports[`fix > .ts > subpackage without tsconfig.json 1`] = `
"import type FooService from \\"foo/services/foo-service\\";
import type AuthenticatedUser from \\"authentication/services/authenticated-user\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"authentication@authenticated-user\\")
  declare authenticatedUser: AuthenticatedUser;

  @service(\\"foo@foo-service\\")
  declare otherProp: FooService;
}
"
`;

exports[`fix > .ts > typedef 1`] = `
"interface Person {
  data: {
    name: string;
    age: number;
    contact: {
      address: string;
      phone?: string;
    };
  };
}
"
`;

exports[`fix > .ts > with non-qualified service 1`] = `
"import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  // @ts-expect-error @rehearsal TODO TS7008: Member 'authenticatedUser' implicitly has an 'any' type.
  @service(\\"authenticated-user\\") authenticatedUser;
}
"
`;

exports[`fix > .ts > with qualified service 1`] = `
"import type FooService from \\"foo/services/foo-service\\";
import type AuthenticatedUser from \\"authentication/services/authenticated-user\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"authentication@authenticated-user\\")
  declare authenticatedUser: AuthenticatedUser;

  @service(\\"foo@foo-service\\")
  declare otherProp: FooService;
}
"
`;

exports[`fix > .ts > with qualified service in subpackage with included types 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'foo/services/foo-service' or its corresponding type declarations.
import type FooService from \\"foo/services/foo-service\\";
// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'authentication/services/authenticated-user' or its corresponding type declarations.
import type AuthenticatedUser from \\"authentication/services/authenticated-user\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"authentication@authenticated-user\\")
  declare authenticatedUser: AuthenticatedUser;

  @service(\\"foo@foo-service\\")
  declare otherProp: FooService;
}
"
`;

exports[`fix > .ts > with qualified service in subpackage without included types 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'foo/services/foo-service' or its corresponding type declarations.
import type FooService from \\"foo/services/foo-service\\";
// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'authentication/services/authenticated-user' or its corresponding type declarations.
import type AuthenticatedUser from \\"authentication/services/authenticated-user\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"authentication@authenticated-user\\")
  declare authenticatedUser: AuthenticatedUser;

  @service(\\"foo@foo-service\\")
  declare otherProp: FooService;
}
"
`;

exports[`fix > .ts > with service map 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'services/moo/moo' or its corresponding type declarations.
import type MooService from \\"services/moo/moo\\";
import type GooService from \\"services/goo\\";
// @ts-expect-error @rehearsal TODO TS2307: Cannot find module '@some-org/some-package/services/from-service-map' or its corresponding type declarations.
import type Mapped from \\"@some-org/some-package/services/from-service-map\\";
import type BooService from \\"boo/services/boo-service\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeTsComponent extends Component {
  @service(\\"boo-service\\")
  declare booService: BooService;

  @service(\\"@some-org/some-package@mapped\\")
  declare something: Mapped;

  @service()
  declare gooService: GooService;

  @service
  declare mooService: MooService;
}
"
`;

exports[`fix > .ts, .gts > previously migrated .gts 1`] = `
"import type FooService from \\"foo/services/foo-service\\";

// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'services/moo/moo' or its corresponding type declarations.
import type MooService from \\"services/moo/moo\\";
import type GooService from \\"services/goo\\";
import type BooService from \\"boo/services/boo-service\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"foo@foo-service\\")
  declare fooService: FooService;

  @service(\\"boo-service\\")
  declare booService: BooService;

  @service
  declare gooService: GooService;

  @service
  declare mooService: MooService;

  // Has to be fixes, but no additional import statement added
  @service(\\"boo-service\\")
  declare secondBooService: BooService;

  // @ts-expect-error @rehearsal TODO TS7008: Member 'nonQualified' implicitly has an 'any' type.
  @service(\\"non-qualified\\") nonQualified;

  <template>
    <span>Hello, I am human, and I am 10 years old!</span>
  </template>
}
"
`;

exports[`fix > .ts, .gts > resolveIgnoredPaths() 1`] = `
[
  "<tmp-path>/packages/boo/package.json",
  "<tmp-path>/packages/boo/tsconfig.json",
  "<tmp-path>/packages/boo/with-qualified-service.ts",
  "<tmp-path>/packages/foo/package.json",
  "<tmp-path>/packages/foo/tsconfig.json",
  "<tmp-path>/packages/foo/with-qualified-service.ts",
  "<tmp-path>/packages/moo/package.json",
  "<tmp-path>/packages/moo/with-qualified-service.ts",
  "<tmp-path>/src/gts/with-class.gts",
]
`;

exports[`fix > EXPERIMENTAL_MODES, GlintService > mode: drain 1`] = `
"class Foo {
  name: number;
  constructor(name: number) {
    this.name = name;
  }

  hello(): number {
    return this.name + 1;
  }
}
"
`;

exports[`fix > EXPERIMENTAL_MODES, GlintService > mode: single-pass 1`] = `
"class Foo {
  name: number;
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'name' implicitly has an 'any' type.
  constructor(name) {
    this.name = name;
  }

  hello() {
    return this.name + 1;
  }
}
"
`;

exports[`fix > RehearsalService > EXPERIMENTAL_MODES mode: drain 1`] = `
"class Foo {
  name: number;
  constructor(name: number) {
    this.name = name;
  }

  hello(): number {
    return this.name + 1;
  }
}
"
`;

exports[`fix > RehearsalService > EXPERIMENTAL_MODES mode: single-pass 1`] = `
"class Foo {
  name: number;
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'name' implicitly has an 'any' type.
  constructor(name) {
    this.name = name;
  }

  hello() {
    return this.name + 1;
  }
}
"
`;

exports[`fix > RehearsalService > import type after infer it from hierarchy 1`] = `
"import { Food } from \\"./basic.food\\";

export class Animal {
  say(message: string): string {
    return message;
  }

  feed(food: Food, quantity: number): boolean {
    console.log(food, quantity);
    return false;
  }
}
"
`;

exports[`fix > RehearsalService > import type after infer it from hierarchy 2`] = `
"export class Food {
  title: string;

  constructor(title: string) {
    this.title = title;
  }
}
"
`;

exports[`fix > RehearsalService > import type after infer it from hierarchy 3`] = `
"import { Animal } from \\"./basic.animal\\";
import { Food } from \\"./basic.food\\";

export class Dog extends Animal {
  say(message: string): string {
    console.log(message);
    return \\"bar\\";
  }

  feed(food: Food, quantity: number): boolean {
    return super.feed(food, quantity);
  }
}
"
`;

exports[`fix > RehearsalService > more errors 1`] = `
"export default class MyComponent {
  // @ts-expect-error @rehearsal TODO TS6133: The parameter 'a' is never used. Remove the parameter from function definition or use it.
  missingParamTypes(a: number, b: number): void {
    a = 1;
    b = 2;
  }

  containsUnsupportedDiagnostic(): () => void {
    return function () {
      // @ts-expect-error @rehearsal TODO TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
      console.log(this);
    }.bind(this);
  }
}
"
`;

exports[`fix > RehearsalService > typedef 1`] = `
"interface Person {
  data: {
    name: string;
    age: number;
    contact: {
      address: string;
      phone?: string;
    };
  };
}
"
`;

exports[`fix > with addon service > .gts 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module '@my-org/some-ember-addon/services/locale-service' or its corresponding type declarations.
import type LocaleService from \\"@my-org/some-ember-addon/services/locale-service\\";
import type Foo from \\"my-addon/services/foo\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeGtsComponent extends Component {
  @service(\\"my-addon@foo\\")
  declare foo: Foo;

  @service(\\"@my-org/some-ember-addon@LocaleService\\")
  declare locale: LocaleService;

  <template>
    Hello
  </template>
}
"
`;

exports[`fix > with addon service > .ts 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module '@my-org/some-ember-addon/services/locale-service' or its corresponding type declarations.
import type LocaleService from \\"@my-org/some-ember-addon/services/locale-service\\";
// @ts-expect-error @rehearsal TODO TS2306: File './node_modules/test-addon/services/foo.ts' is not a module.
import type Foo from \\"my-addon/services/foo\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeTsComponent extends Component {
  @service(\\"my-addon@foo\\")
  declare foo: Foo;

  @service(\\"@my-org/some-ember-addon@LocaleService\\")
  declare locale: LocaleService;
}
"
`;
