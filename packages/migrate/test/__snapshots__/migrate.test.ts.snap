// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fix > .gts > still fixes the file if there are no errors 1`] = `
"import Component from '@glimmer/component'; export default class Hello extends Component { name =
'world';

<template>
  <span>Hello, I am {{this.name}}!</span>
</template>
}"
`;

exports[`fix > .gts > when missing a local prop 1`] = `"import Component from '@glimmer/component'; export default class Foo extends Component {}"`;

exports[`fix > .gts > with bare template 1`] = `
"<template>
  {{! @glint-expect-error @rehearsal TODO TS2339: Property 'name' does not exist on type '{}'. }}
  <span>Hello, {{@name}}!</span>

  {{! @glint-expect-error @rehearsal TODO TS2339: Property 'someCondition' does not exist on type '{}'. }}
  {{#if @someCondition}}
    <div>true!</div>
  {{/if}}
</template>"
`;

exports[`fix > .gts > with class 1`] = `
"import Component from '@glimmer/component'; export default class Hello extends Component { name =
'world';

<template>
  {{! @glint-expect-error @rehearsal TODO TS2339: Property 'age' does not exist on type '{}'. }}
  <span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>
</template>
}"
`;

exports[`fix > .gts > with non-qualified service 1`] = `
"import Component from '@glimmer/component'; import { inject as service } from '@ember/service';
export default class SomeComponent extends Component { @service('authenticated-user') //
@ts-expect-error @rehearsal TODO TS7008: Member 'authenticatedUser' implicitly has an 'any' type.
authenticatedUser; }"
`;

exports[`fix > .gts > with qualified service 1`] = `
"import type FooService from 'foo/services/foo-service'; import type AuthenticatedUser from
'authentication/services/authenticated-user'; import Component from '@glimmer/component'; import {
inject as service } from '@ember/service'; export default class SomeComponent extends Component {
@service(\\"authentication@authenticated-user\\") declare authenticatedUser: AuthenticatedUser;
@service(\\"foo@foo-service\\") declare otherProp: FooService; }"
`;

exports[`fix > .gts > with service map 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'services/moo/moo' or its
corresponding type declarations. import type MooService from 'services/moo/moo'; import type
GooService from 'services/goo'; import type BooService from 'boo/services/boo-service'; import
Component from \\"@glimmer/component\\"; import { inject as service } from \\"@ember/service\\"; export
default class SomeComponent extends Component { @service(\\"boo-service\\") declare booService:
BooService; @service declare gooService: GooService; @service declare mooService: MooService; }"
`;

exports[`fix > .gts > with template assigned to variable 1`] = `
"const Hello =
<template>
  {{! @glint-expect-error @rehearsal TODO TS2339: Property 'name' does not exist on type '{}'. }}
  <span>Hello, {{@name}}!</span>
</template>"
`;

exports[`fix > .hbs > simple class 1`] = `
"{{! @glint-expect-error @rehearsal TODO TS2339: Property 'name' does not exist on type 'Foo'. }}
<span>Hello, I am {{this.name}} and I am {{@age}} years old!</span>"
`;

exports[`fix > .hbs > simple class 2`] = `
"import Component from \\"@glimmer/component\\";

export default class Foo extends Component {}
"
`;

exports[`fix > .ts > with qualified service in subpackage 1`] = `
"// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'foo/services/foo-service' or its corresponding type declarations.
import type FooService from \\"foo/services/foo-service\\";
// @ts-expect-error @rehearsal TODO TS2307: Cannot find module 'authentication/services/authenticated-user' or its corresponding type declarations.
import type AuthenticatedUser from \\"authentication/services/authenticated-user\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"authentication@authenticated-user\\")
  declare authenticatedUser: AuthenticatedUser;

  @service(\\"foo@foo-service\\")
  declare otherProp: FooService;
}
"
`;

exports[`fix > with addon service > .gts 1`] = `
"import type Foo from 'my-addon/services/foo'; import Component from '@glimmer/component'; import {
inject as service } from '@ember/service'; export default class SomeComponent extends Component {
@service(\\"my-addon@foo\\") declare foo: Foo; }"
`;

exports[`fix > with addon service > .ts 1`] = `
"// @ts-expect-error @rehearsal TODO TS2306: File './node_modules/test-addon/services/foo.ts' is not a module.
import type Foo from \\"my-addon/services/foo\\";
import Component from \\"@glimmer/component\\";
import { inject as service } from \\"@ember/service\\";

export default class SomeComponent extends Component {
  @service(\\"my-addon@foo\\")
  declare foo: Foo;
}
"
`;
