// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Command: fix "base_ts_app" fixture > can fix starting with a directory 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Analyzing project dependency graph
[SUCCESS] Analyzing project dependency graph
[STARTED] Infer Types
[DATA] starting...
[DATA] preparing files ...
[DATA] [--------------------] 0/5 files | ETA: **:**:**
[DATA]  processing file: /src/get-live-neighbor-count.ts
[DATA] [====----------------] 1/5 files | ETA: **:**:**
[DATA]  processing file: /src/apply-rules.ts
[DATA] [========------------] 2/5 files | ETA: **:**:**
[DATA]  processing file: /src/gen-random-grid.ts
[DATA] [============--------] 3/5 files | ETA: **:**:**
[DATA]  processing file: /src/app.ts
[DATA] [================----] 4/5 files | ETA: **:**:**
[DATA]  processing file: /src/sub/grid.ts
[TITLE] Types Inferred
[TITLE]   Duration: 00:00
[TITLE]   16 errors caught by rehearsal
[TITLE]   7 have been fixed by rehearsal
[TITLE]   9 errors need to be fixed manually
[TITLE]     -- 4 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 5 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   Duration: 00:00
[SUCCESS]   16 errors caught by rehearsal
[SUCCESS]   7 have been fixed by rehearsal
[SUCCESS]   9 errors need to be fixed manually
[SUCCESS]     -- 4 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 5 eslint errors, with details in the report"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a directory 2`] = `""`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a directory 3`] = `
"/*
RULES:
1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by overpopulation.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

These rules, which compare the behavior of the automaton to real life, can be condensed into the following:

  Any live cell with two or three live neighbours survives.
  Any dead cell with three live neighbours becomes a live cell.
  All other live cells die in the next generation. Similarly, all other dead cells stay dead.
*/

import { stdout } from 'node:process';
import { generateRandomGrid } from './gen-random-grid.js';
import { applyRules } from './apply-rules.js';

// basic just grab the args if they exist
// assume the are valid and in the right order
// gridWidth, gridHeight, cellAliveState, cellDeadState
const [_bin, _file, ...args] = process.argv;

if (!args.length || args.length < 4) {
  throw new Error(
    'You must provide 4 arguments: gridWidth, gridHeight, cellAliveState, cellDeadState'
  );
}

const [gridWidth, gridHeight, cellAliveState, cellDeadState] = args;

// the initial grid to kick things off
const GRID_SEED = generateRandomGrid(
  [parseInt(gridWidth), parseInt(gridHeight)],
  [cellAliveState, cellDeadState]
);

// when to stop
const RUN_LIMIT = 500;
// remove the terminal cursor so the grid renders nicely
stdout.write('\\\\x1b[?25l');

// update the grid recursively on interval
(function update(prevGrid, runTally = 0): void {
  // set the stdout cursor to the top left
  stdout.cursorTo(0, 0);

  // write the grid to console
  console.log(\`\\\\n\\\\nGeneration: \${runTally}\`);
  console.table(prevGrid);

  // should we stop running
  if (runTally >= RUN_LIMIT) {
    // put the cursor back
    stdout.write('\\\\x1b[?25h');
    return;
  }

  const [newGrid, totalLiveNeighbors] = applyRules(prevGrid, [cellAliveState, cellDeadState]);

  // if all of the cells are dead, stop running
  if (totalLiveNeighbors === 0) {
    console.log(\`Within \${runTally} generations. All cells are dead\`);
    // put the cursor back
    stdout.write('\\\\x1b[?25h');
    return;
  }

  // add a tally mark
  runTally++;

  // recursively call update again within a fps interval so we can throttle the grid updates
  setTimeout(() => {
    update(newGrid, runTally);
  }, 150);
})(GRID_SEED);
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a directory 4`] = `
"import {
  getLiveNeighborCount,
} from './get-live-neighbor-count.js';

// @ts-expect-error @rehearsal TODO TS7006: Parameter 'grid' implicitly has an 'any' type.
export function applyRules(grid, cellCharState) {
  // clone the grid for the next generation
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'row' implicitly has an 'any' type.
  const newGrid = grid.map((row) => [...row]);
  // keep track if all of the cells are dead and exit if so
  let totalLiveNeighbors = 0;

  // iterate over each cell, apply the rules and update cell state
  for (let y = 0; y < grid.length; y++) {
    for (let x = 0; x < grid[y].length; x++) {
      const cellState = grid[y][x];
      const liveNeighborCount = getLiveNeighborCount(
        grid,
        [y, x],
        [cellCharState[0], cellCharState[1]]
      );

      totalLiveNeighbors += liveNeighborCount;

      // check the current cell state and apply the rules
      if (cellState === cellCharState[0]) {
        if (liveNeighborCount < 2 || liveNeighborCount > 3) {
          // dead
          newGrid[y][x] = cellCharState[1];
        }

        if (liveNeighborCount == 2 || liveNeighborCount == 3) {
          // alive
          newGrid[y][x] = cellCharState[0];
        }
      } else {
        if (liveNeighborCount == 3) {
          // alive
          newGrid[y][x] = cellCharState[0];
        }
      }
    }
  }

  return [newGrid, totalLiveNeighbors];
}
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a directory 5`] = `
"// generate a random grid based on a set dimension and random alive/dead cells
export function generateRandomGrid(
  dimensions: number[],
  chars = ['▄', ' ']
): string[][] {
  const grid = [];

  // create the grid
  for (let y = 0; y < dimensions[1]; y++) {
    const row = [];
    for (let x = 0; x < dimensions[0]; x++) {
      if (Math.random() > 0.5) {
        row.push(chars[0]);
      } else {
        row.push(chars[1]);
      }
    }

    grid.push(row);
  }

  return grid;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a directory 6`] = `
"// based on a given cell, return the number of live neighbors
export function getLiveNeighborCount(
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'grid' implicitly has an 'any' type.
  grid,
  coords: number[] | [any, any],
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'cellCharState' implicitly has an 'any' type.
  cellCharState
): number {
  const [x, y] = coords;

  // 8 neighbors
  const neighbors = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1],
  ];

  // iterate over neighbors
  const liveNeighbors = neighbors.filter(([x, y]) => {
    // handle out of bounds
    if (x < 0 || y < 0 || x >= grid.length || y >= grid.length) {
      return false;
    }

    // if alive add a tally mark
    if (grid[x][y] === cellCharState[0]) {
      return true;
    }
  });

  return liveNeighbors.length;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a file 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Analyzing project dependency graph
[SUCCESS] Analyzing project dependency graph
[STARTED] Infer Types
[DATA] starting...
[DATA] preparing files ...
[DATA] [--------------------] 0/1 files | ETA: **:**:**
[DATA]  processing file: /src/gen-random-grid.ts
[TITLE] Types Inferred
[TITLE]   Duration: 00:00
[TITLE]   3 errors caught by rehearsal
[TITLE]   2 have been fixed by rehearsal
[TITLE]   1 errors need to be fixed manually
[TITLE]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 1 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   Duration: 00:00
[SUCCESS]   3 errors caught by rehearsal
[SUCCESS]   2 have been fixed by rehearsal
[SUCCESS]   1 errors need to be fixed manually
[SUCCESS]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 1 eslint errors, with details in the report"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a file 2`] = `
"// generate a random grid based on a set dimension and random alive/dead cells
export function generateRandomGrid(
  dimensions: number[],
  chars = ['▄', ' ']
): string[][] {
  const grid = [];

  // create the grid
  for (let y = 0; y < dimensions[1]; y++) {
    const row = [];
    for (let x = 0; x < dimensions[0]; x++) {
      if (Math.random() > 0.5) {
        row.push(chars[0]);
      } else {
        row.push(chars[1]);
      }
    }

    grid.push(row);
  }

  return grid;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a file 3`] = `""`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a subdirectory 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Analyzing project dependency graph
[SUCCESS] Analyzing project dependency graph
[STARTED] Infer Types
[DATA] starting...
[DATA] preparing files ...
[DATA] [--------------------] 0/1 files | ETA: **:**:**
[DATA]  processing file: /src/sub/grid.ts
[TITLE] Types Inferred
[TITLE]   Duration: 00:00
[TITLE]   3 errors caught by rehearsal
[TITLE]   1 have been fixed by rehearsal
[TITLE]   2 errors need to be fixed manually
[TITLE]     -- 1 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 1 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   Duration: 00:00
[SUCCESS]   3 errors caught by rehearsal
[SUCCESS]   1 have been fixed by rehearsal
[SUCCESS]   2 errors need to be fixed manually
[SUCCESS]     -- 1 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 1 eslint errors, with details in the report"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a subdirectory 2`] = `""`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a subdirectory 3`] = `
"/*
RULES:
1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by overpopulation.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

These rules, which compare the behavior of the automaton to real life, can be condensed into the following:

  Any live cell with two or three live neighbours survives.
  Any dead cell with three live neighbours becomes a live cell.
  All other live cells die in the next generation. Similarly, all other dead cells stay dead.
*/

import { stdout } from 'node:process';
import { generateRandomGrid } from './gen-random-grid.js';
import { applyRules } from './apply-rules.js';

// basic just grab the args if they exist
// assume the are valid and in the right order
// gridWidth, gridHeight, cellAliveState, cellDeadState
const [_bin, _file, ...args] = process.argv;

if (!args.length || args.length < 4) {
  throw new Error(
    'You must provide 4 arguments: gridWidth, gridHeight, cellAliveState, cellDeadState'
  );
}

const [gridWidth, gridHeight, cellAliveState, cellDeadState] = args;

// the initial grid to kick things off
const GRID_SEED = generateRandomGrid(
  [parseInt(gridWidth), parseInt(gridHeight)],
  [cellAliveState, cellDeadState]
);

// when to stop
const RUN_LIMIT = 500;
// remove the terminal cursor so the grid renders nicely
stdout.write('\\\\x1b[?25l');

// update the grid recursively on interval
(function update(prevGrid, runTally = 0) {
  // set the stdout cursor to the top left
  stdout.cursorTo(0, 0);

  // write the grid to console
  console.log(\`\\\\n\\\\nGeneration: \${runTally}\`);
  console.table(prevGrid);

  // should we stop running
  if (runTally >= RUN_LIMIT) {
    // put the cursor back
    stdout.write('\\\\x1b[?25h');
    return;
  }

  const [newGrid, totalLiveNeighbors] = applyRules(prevGrid, [cellAliveState, cellDeadState]);

  // if all of the cells are dead, stop running
  if (totalLiveNeighbors === 0) {
    console.log(\`Within \${runTally} generations. All cells are dead\`);
    // put the cursor back
    stdout.write('\\\\x1b[?25h');
    return;
  }

  // add a tally mark
  runTally++;

  // recursively call update again within a fps interval so we can throttle the grid updates
  setTimeout(() => {
    update(newGrid, runTally);
  }, 150);
})(GRID_SEED);
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a subdirectory 4`] = `
"import {
  getLiveNeighborCount,
} from './get-live-neighbor-count.js';

export function applyRules(grid, cellCharState) {
  // clone the grid for the next generation
  const newGrid = grid.map((row) => [...row]);
  // keep track if all of the cells are dead and exit if so
  let totalLiveNeighbors = 0;

  // iterate over each cell, apply the rules and update cell state
  for (let y = 0; y < grid.length; y++) {
    for (let x = 0; x < grid[y].length; x++) {
      const cellState = grid[y][x];
      const liveNeighborCount = getLiveNeighborCount(
        grid,
        [y, x],
        [cellCharState[0], cellCharState[1]]
      );

      totalLiveNeighbors += liveNeighborCount;

      // check the current cell state and apply the rules
      if (cellState === cellCharState[0]) {
        if (liveNeighborCount < 2 || liveNeighborCount > 3) {
          // dead
          newGrid[y][x] = cellCharState[1];
        }

        if (liveNeighborCount == 2 || liveNeighborCount == 3) {
          // alive
          newGrid[y][x] = cellCharState[0];
        }
      } else {
        if (liveNeighborCount == 3) {
          // alive
          newGrid[y][x] = cellCharState[0];
        }
      }
    }
  }

  return [newGrid, totalLiveNeighbors];
}
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a subdirectory 5`] = `
"// generate a random grid based on a set dimension and random alive/dead cells
export function generateRandomGrid(
  dimensions,
  chars = ['▄', ' ']
) {
  const grid = [];

  // create the grid
  for (let y = 0; y < dimensions[1]; y++) {
    const row = [];
    for (let x = 0; x < dimensions[0]; x++) {
      if (Math.random() > 0.5) {
        row.push(chars[0]);
      } else {
        row.push(chars[1]);
      }
    }

    grid.push(row);
  }

  return grid;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > can fix starting with a subdirectory 6`] = `
"// based on a given cell, return the number of live neighbors
export function getLiveNeighborCount(
  grid,
  coords,
  cellCharState
) {
  const [x, y] = coords;

  // 8 neighbors
  const neighbors = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1],
  ];

  // iterate over neighbors
  const liveNeighbors = neighbors.filter(([x, y]) => {
    // handle out of bounds
    if (x < 0 || y < 0 || x >= grid.length || y >= grid.length) {
      return false;
    }

    // if alive add a tally mark
    if (grid[x][y] === cellCharState[0]) {
      return true;
    }
  });

  return liveNeighbors.length;
}
"
`;

exports[`Command: fix "ember-ts-app" fixture > can fix starting with a file 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Analyzing project dependency graph
[SUCCESS] Analyzing project dependency graph
[STARTED] Infer Types
[DATA] starting...
[DATA] preparing files ...
[DATA] [--------------------] 0/30 files | ETA: **:**:**
[DATA]  processing file: /app/app.js
[DATA] [--------------------] 1/30 files | ETA: **:**:**
[DATA]  processing file: /app/router.js
[DATA] [=-------------------] 2/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/ember-component.hbs
[DATA] [==------------------] 3/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/ember-component.ts
[DATA] [==------------------] 4/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/foo.hbs
[DATA] [===-----------------] 5/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/foo.ts
[DATA] [====----------------] 6/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/js-component.hbs
[DATA] [====----------------] 7/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/js-component.js
[DATA] [=====---------------] 8/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/no-backing-module.hbs
[DATA] [======--------------] 9/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/nocheck-me.hbs
[DATA] [======--------------] 10/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/qux.ts
[DATA] [=======-------------] 11/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/template-only-module.hbs
[DATA] [========------------] 12/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/template-only-module.ts
[DATA] [========------------] 13/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/wrapper-component.hbs
[DATA] [=========-----------] 14/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/wrapper-component.ts
[DATA] [==========----------] 15/30 files | ETA: **:**:**
[DATA]  processing file: /app/controllers/classic-route.ts
[DATA] [==========----------] 16/30 files | ETA: **:**:**
[DATA]  processing file: /app/helpers/affix.ts
[DATA] [===========---------] 17/30 files | ETA: **:**:**
[DATA]  processing file: /app/helpers/repeat.ts
[DATA] [============--------] 18/30 files | ETA: **:**:**
[DATA]  processing file: /app/routes/classic-route.ts
[DATA] [============--------] 19/30 files | ETA: **:**:**
[DATA]  processing file: /app/templates/application.hbs
[DATA] [=============-------] 20/30 files | ETA: **:**:**
[DATA]  processing file: /app/templates/classic-route.hbs
[DATA] [==============------] 21/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/bar/index.hbs
[DATA] [==============------] 22/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/bar/index.ts
[DATA] [===============-----] 23/30 files | ETA: **:**:**
[DATA]  processing file: /app/templates/components/qux.hbs
[DATA] [================----] 24/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/child.hbs
[DATA] [================----] 25/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/parent.ts
[DATA] [=================---] 26/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/child.ts
[DATA] [==================--] 27/30 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/parent.hbs
[DATA] [==================--] 28/30 files | ETA: **:**:**
[DATA]  processing file: /app/pods/components/baz/component.ts
[DATA] [===================-] 29/30 files | ETA: **:**:**
[DATA]  processing file: /app/pods/components/baz/template.hbs
[TITLE] Types Inferred
[TITLE]   Duration: 00:00
[TITLE]   69 errors caught by rehearsal
[TITLE]   5 have been fixed by rehearsal
[TITLE]   64 errors need to be fixed manually
[TITLE]     -- 18 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 44 glint errors, with details in the report
[TITLE]     -- 2 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   Duration: 00:00
[SUCCESS]   69 errors caught by rehearsal
[SUCCESS]   5 have been fixed by rehearsal
[SUCCESS]   64 errors need to be fixed manually
[SUCCESS]     -- 18 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 44 glint errors, with details in the report
[SUCCESS]     -- 2 eslint errors, with details in the report"
`;

exports[`Command: fix "ember-ts-app" fixture > can fix starting with a file 2`] = `""`;

exports[`Command: fix "ember-ts-app" fixture > fix package with src arg and graph, ignores helpers 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Analyzing project dependency graph
[SUCCESS] Analyzing project dependency graph
[STARTED] Infer Types
[DATA] starting...
[DATA] preparing files ...
[DATA] [--------------------] 0/28 files | ETA: **:**:**
[DATA]  processing file: /app/app.js
[DATA] [--------------------] 1/28 files | ETA: **:**:**
[DATA]  processing file: /app/router.js
[DATA] [=-------------------] 2/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/ember-component.hbs
[DATA] [==------------------] 3/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/ember-component.ts
[DATA] [==------------------] 4/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/foo.hbs
[DATA] [===-----------------] 5/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/foo.ts
[DATA] [====----------------] 6/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/js-component.hbs
[DATA] [=====---------------] 7/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/js-component.js
[DATA] [=====---------------] 8/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/no-backing-module.hbs
[DATA] [======--------------] 9/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/nocheck-me.hbs
[DATA] [=======-------------] 10/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/qux.ts
[DATA] [=======-------------] 11/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/template-only-module.hbs
[DATA] [========------------] 12/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/template-only-module.ts
[DATA] [=========-----------] 13/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/wrapper-component.hbs
[DATA] [==========----------] 14/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/wrapper-component.ts
[DATA] [==========----------] 15/28 files | ETA: **:**:**
[DATA]  processing file: /app/controllers/classic-route.ts
[DATA] [===========---------] 16/28 files | ETA: **:**:**
[DATA]  processing file: /app/routes/classic-route.ts
[DATA] [============--------] 17/28 files | ETA: **:**:**
[DATA]  processing file: /app/templates/application.hbs
[DATA] [============--------] 18/28 files | ETA: **:**:**
[DATA]  processing file: /app/templates/classic-route.hbs
[DATA] [=============-------] 19/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/bar/index.hbs
[DATA] [==============------] 20/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/bar/index.ts
[DATA] [===============-----] 21/28 files | ETA: **:**:**
[DATA]  processing file: /app/templates/components/qux.hbs
[DATA] [===============-----] 22/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/child.hbs
[DATA] [================----] 23/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/parent.ts
[DATA] [=================---] 24/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/child.ts
[DATA] [=================---] 25/28 files | ETA: **:**:**
[DATA]  processing file: /app/components/test-cases/subclassing/parent.hbs
[DATA] [==================--] 26/28 files | ETA: **:**:**
[DATA]  processing file: /app/pods/components/baz/component.ts
[DATA] [===================-] 27/28 files | ETA: **:**:**
[DATA]  processing file: /app/pods/components/baz/template.hbs
[TITLE] Types Inferred
[TITLE]   Duration: 00:00
[TITLE]   63 errors caught by rehearsal
[TITLE]   3 have been fixed by rehearsal
[TITLE]   60 errors need to be fixed manually
[TITLE]     -- 14 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 44 glint errors, with details in the report
[TITLE]     -- 2 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   Duration: 00:00
[SUCCESS]   63 errors caught by rehearsal
[SUCCESS]   3 have been fixed by rehearsal
[SUCCESS]   60 errors need to be fixed manually
[SUCCESS]     -- 14 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 44 glint errors, with details in the report
[SUCCESS]     -- 2 eslint errors, with details in the report"
`;

exports[`Command: fix "ember-ts-app" fixture > fix package with src arg and graph, ignores helpers 2`] = `""`;
