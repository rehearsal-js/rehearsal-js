// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Command: fix "base_ts_app" fixture > fix directory with src arg 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Infer Types
[DATA] processing file: /vitest.config.ts
[DATA] processing file: /src/app.ts
[DATA] processing file: /src/apply-rules.ts
[DATA] processing file: /src/gen-random-grid.ts
[DATA] processing file: /src/get-live-neighbor-count.ts
[DATA] processing file: /test/main.test.ts
[TITLE] Types Inferred
[TITLE]   16 errors caught by rehearsal
[TITLE]   6 have been fixed by rehearsal
[TITLE]   10 errors need to be fixed manually
[TITLE]     -- 4 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 6 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   16 errors caught by rehearsal
[SUCCESS]   6 have been fixed by rehearsal
[SUCCESS]   10 errors need to be fixed manually
[SUCCESS]     -- 4 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 6 eslint errors, with details in the report"
`;

exports[`Command: fix "base_ts_app" fixture > fix directory with src arg 2`] = `""`;

exports[`Command: fix "base_ts_app" fixture > fix directory with src arg 3`] = `
"/*
RULES:
1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by overpopulation.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

These rules, which compare the behavior of the automaton to real life, can be condensed into the following:

  Any live cell with two or three live neighbours survives.
  Any dead cell with three live neighbours becomes a live cell.
  All other live cells die in the next generation. Similarly, all other dead cells stay dead.
*/

import { stdout } from 'node:process';
import { generateRandomGrid } from './gen-random-grid.js';
import { applyRules } from './apply-rules.js';

// basic just grab the args if they exist
// assume the are valid and in the right order
// gridWidth, gridHeight, cellAliveState, cellDeadState
const [_bin, _file, ...args] = process.argv;

if (!args.length || args.length < 4) {
  throw new Error(
    'You must provide 4 arguments: gridWidth, gridHeight, cellAliveState, cellDeadState'
  );
}

const [gridWidth, gridHeight, cellAliveState, cellDeadState] = args;

// the initial grid to kick things off
const GRID_SEED = generateRandomGrid(
  [parseInt(gridWidth), parseInt(gridHeight)],
  [cellAliveState, cellDeadState]
);

// when to stop
const RUN_LIMIT = 500;
// remove the terminal cursor so the grid renders nicely
stdout.write('\\\\x1b[?25l');

// update the grid recursively on interval
(function update(prevGrid, runTally = 0) {
  // set the stdout cursor to the top left
  stdout.cursorTo(0, 0);

  // write the grid to console
  console.log(\`\\\\n\\\\nGeneration: \${runTally}\`);
  console.table(prevGrid);

  // should we stop running
  if (runTally >= RUN_LIMIT) {
    // put the cursor back
    stdout.write('\\\\x1b[?25h');
    return;
  }

  const [newGrid, totalLiveNeighbors] = applyRules(prevGrid, [cellAliveState, cellDeadState]);

  // if all of the cells are dead, stop running
  if (totalLiveNeighbors === 0) {
    console.log(\`Within \${runTally} generations. All cells are dead\`);
    // put the cursor back
    stdout.write('\\\\x1b[?25h');
    return;
  }

  // add a tally mark
  runTally++;

  // recursively call update again within a fps interval so we can throttle the grid updates
  setTimeout(() => {
    update(newGrid, runTally);
  }, 150);
})(GRID_SEED);
"
`;

exports[`Command: fix "base_ts_app" fixture > fix directory with src arg 4`] = `
"import {
  getLiveNeighborCount,
} from './get-live-neighbor-count.js';

// @ts-expect-error @rehearsal TODO TS7006: Parameter 'grid' implicitly has an 'any' type.
export function applyRules(grid, cellCharState) {
  // clone the grid for the next generation
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'row' implicitly has an 'any' type.
  const newGrid = grid.map((row) => [...row]);
  // keep track if all of the cells are dead and exit if so
  let totalLiveNeighbors = 0;

  // iterate over each cell, apply the rules and update cell state
  for (let y = 0; y < grid.length; y++) {
    for (let x = 0; x < grid[y].length; x++) {
      const cellState = grid[y][x];
      const liveNeighborCount = getLiveNeighborCount(
        grid,
        [y, x],
        [cellCharState[0], cellCharState[1]]
      );

      totalLiveNeighbors += liveNeighborCount;

      // check the current cell state and apply the rules
      if (cellState === cellCharState[0]) {
        if (liveNeighborCount < 2 || liveNeighborCount > 3) {
          // dead
          newGrid[y][x] = cellCharState[1];
        }

        if (liveNeighborCount == 2 || liveNeighborCount == 3) {
          // alive
          newGrid[y][x] = cellCharState[0];
        }
      } else {
        if (liveNeighborCount == 3) {
          // alive
          newGrid[y][x] = cellCharState[0];
        }
      }
    }
  }

  return [newGrid, totalLiveNeighbors];
}
"
`;

exports[`Command: fix "base_ts_app" fixture > fix directory with src arg 5`] = `
"// generate a random grid based on a set dimension and random alive/dead cells
export function generateRandomGrid(
  dimensions: number[],
  chars = ['▄', ' ']
): string[][]  {
  const grid = [];

  // create the grid
  for (let y = 0; y < dimensions[1]; y++) {
    const row = [];
    for (let x = 0; x < dimensions[0]; x++) {
      if (Math.random() > 0.5) {
        row.push(chars[0]);
      } else {
        row.push(chars[1]);
      }
    }

    grid.push(row);
  }

  return grid;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > fix directory with src arg 6`] = `
"// based on a given cell, return the number of live neighbors
export function getLiveNeighborCount(
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'grid' implicitly has an 'any' type.
  grid,
  coords: number[] | [any, any],
  // @ts-expect-error @rehearsal TODO TS7006: Parameter 'cellCharState' implicitly has an 'any' type.
  cellCharState
): number  {
  const [x, y] = coords;

  // 8 neighbors
  const neighbors = [
    [x - 1, y - 1],
    [x - 1, y],
    [x - 1, y + 1],
    [x, y - 1],
    [x, y + 1],
    [x + 1, y - 1],
    [x + 1, y],
    [x + 1, y + 1],
  ];

  // iterate over neighbors
  const liveNeighbors = neighbors.filter(([x, y]) => {
    // handle out of bounds
    if (x < 0 || y < 0 || x >= grid.length || y >= grid.length) {
      return false;
    }

    // if alive add a tally mark
    if (grid[x][y] === cellCharState[0]) {
      return true;
    }
  });

  return liveNeighbors.length;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > fix file with src arg 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Infer Types
[DATA] processing file: /vitest.config.ts
[DATA] processing file: /src/app.ts
[DATA] processing file: /src/apply-rules.ts
[DATA] processing file: /src/gen-random-grid.ts
[DATA] processing file: /src/get-live-neighbor-count.ts
[DATA] processing file: /test/main.test.ts
[TITLE] Types Inferred
[TITLE]   16 errors caught by rehearsal
[TITLE]   6 have been fixed by rehearsal
[TITLE]   10 errors need to be fixed manually
[TITLE]     -- 4 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 6 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   16 errors caught by rehearsal
[SUCCESS]   6 have been fixed by rehearsal
[SUCCESS]   10 errors need to be fixed manually
[SUCCESS]     -- 4 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 6 eslint errors, with details in the report"
`;

exports[`Command: fix "base_ts_app" fixture > fix file with src arg 2`] = `
"// generate a random grid based on a set dimension and random alive/dead cells
export function generateRandomGrid(
  dimensions: number[],
  chars = ['▄', ' ']
): string[][]  {
  const grid = [];

  // create the grid
  for (let y = 0; y < dimensions[1]; y++) {
    const row = [];
    for (let x = 0; x < dimensions[0]; x++) {
      if (Math.random() > 0.5) {
        row.push(chars[0]);
      } else {
        row.push(chars[1]);
      }
    }

    grid.push(row);
  }

  return grid;
}
"
`;

exports[`Command: fix "base_ts_app" fixture > fix file with src arg 3`] = `""`;

exports[`Command: fix "ember-ts-app" fixture > fix package with src arg and graph 1`] = `
"info:    @rehearsal/fix<test-version>
[STARTED] Initialize
[SUCCESS] Initialize
[STARTED] Analyzing project dependency graph
[SUCCESS] Analyzing project dependency graph
[STARTED] Infer Types
[DATA] processing file: /app/app.js
[DATA] processing file: /app/router.js
[DATA] processing file: /app/components/ember-component.ts
[DATA] processing file: /app/components/foo.ts
[DATA] processing file: /app/components/js-component.js
[DATA] processing file: /app/components/qux.ts
[DATA] processing file: /app/components/template-only-module.ts
[DATA] processing file: /app/components/wrapper-component.ts
[DATA] processing file: /app/components/bar/index.ts
[DATA] processing file: /app/components/test-cases/subclassing/child.ts
[DATA] processing file: /app/components/test-cases/subclassing/parent.ts
[DATA] processing file: /app/controllers/classic-route.ts
[DATA] processing file: /app/helpers/affix.ts
[DATA] processing file: /app/helpers/repeat.ts
[DATA] processing file: /app/pods/components/baz/component.ts
[DATA] processing file: /app/routes/classic-route.ts
[DATA] processing file: /tests/test-helper.js
[DATA] processing file: /tests/helpers/index.ts
[DATA] processing file: /tests/integration/components/bar-test.ts
[DATA] processing file: /tests/integration/components/baz-test.ts
[DATA] processing file: /tests/integration/components/ember-component-test.ts
[DATA] processing file: /tests/integration/components/qux-test.ts
[DATA] processing file: /tests/integration/components/render-test.ts
[DATA] processing file: /tests/integration/components/template-only-module-test.ts
[DATA] processing file: /tests/integration/helpers/repeat-test.ts
[DATA] processing file: /tests/integration/types/empty-signature-test.ts
[DATA] processing file: /types/global.d.ts
[DATA] processing file: /types/template-registry.d.ts
[DATA] processing file: /types/ember-data/types/registries/model.d.ts
[DATA] processing file: /types/ts-ember-app/index.d.ts
[TITLE] Types Inferred
[TITLE]   38 errors caught by rehearsal
[TITLE]   9 have been fixed by rehearsal
[TITLE]   29 errors need to be fixed manually
[TITLE]     -- 27 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 2 eslint errors, with details in the report
[SUCCESS] Types Inferred
[SUCCESS]   38 errors caught by rehearsal
[SUCCESS]   9 have been fixed by rehearsal
[SUCCESS]   29 errors need to be fixed manually
[SUCCESS]     -- 27 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 2 eslint errors, with details in the report"
`;

exports[`Command: fix "ember-ts-app" fixture > fix package with src arg and graph 2`] = `""`;
