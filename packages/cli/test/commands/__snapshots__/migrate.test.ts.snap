// Vitest Snapshot v1

exports[`migrate - JS to TS conversion > able to migrate multiple JS file from an entrypoint 1`] = `
"export function say(name = 'World') {
  return \`Hello \${name}\`;
}"
`;

exports[`migrate - JS to TS conversion > able to migrate multiple JS file from an entrypoint 2`] = `
"import { say } from './foo';

console.log(say('hello'));
"
`;

exports[`migrate - JS to TS conversion > able to migrate single JS file 1`] = `
"import path from 'path';

export function power(foo, bar) {
  return Math.pow(foo, bar);
}"
`;

exports[`migrate - configuing eslint > Create .eslintrc.js and install required dependencies 1`] = `
"\\"use strict\\";
module.exports = {
    parser: '',
    plugins: [
        '@typescript-eslint',
        'import',
        'simple-import-sort',
        'prettier',
        'filenames',
        'eslint-plugin-tsdoc',
        '@linkedin/typescript',
    ],
    extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:prettier/recommended',
    ],
    rules: {
        '@typescript-eslint/naming-convention': [
            'error',
            {
                selector: 'typeLike',
                format: ['PascalCase'],
            },
            {
                selector: 'function',
                format: ['camelCase', 'PascalCase'],
            },
            {
                selector: ['classProperty', 'method', 'accessor'],
                format: ['camelCase'],
            },
            {
                selector: 'variableLike',
                format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
            },
            {
                selector: 'parameter',
                format: ['camelCase'],
                leadingUnderscore: 'allow',
            },
            {
                selector: ['enumMember'],
                format: ['PascalCase', 'UPPER_CASE'],
            },
            {
                selector: ['property'],
                format: ['UPPER_CASE'],
                modifiers: ['readonly', 'static'],
            },
        ],
        'no-shadow': 'off',
        '@typescript-eslint/no-shadow': 'error',
        'tsdoc/syntax': 'error',
        '@linkedin/typescript/consistent-alias-convention': 'error',
        '@typescript-eslint/no-unused-vars': 'error',
        '@typescript-eslint/no-parameter-properties': 'error',
        '@typescript-eslint/no-use-before-define': ['error', { functions: false }],
        '@typescript-eslint/explicit-function-return-type': [
            'error',
            {
                allowExpressions: true,
                allowHigherOrderFunctions: true,
                allowDirectConstAssertionInArrowFunctions: true,
            },
        ],
        'sort-imports': 'off',
        'node/no-missing-import': 'off',
        'import/no-extraneous-dependencies': 'error',
        'import/no-unassigned-import': 'error',
        'import/no-duplicates': 'error',
        'simple-import-sort/imports': 'error',
        'simple-import-sort/exports': 'error',
        'import/no-mutable-exports': 'error',
        'no-new-wrappers': 'error',
        'no-new-object': 'error',
    },
    overrides: [
        {
            files: ['*.ts', '*.tsx', '*.tsm', '*.tsc'],
            parser: '@typescript-eslint/parser',
            parserOptions: {
                ecmaVersion: 'latest',
                sourceType: 'module',
            },
            settings: {
                'import/external-module-folders': ['node_modules', 'node_modules/@types'],
                'import/parsers': {
                    '@typescript-eslint/parser': ['.ts', '.tsx'],
                },
                'import/resolver': {
                    node: {
                        extensions: ['.ts', '.tsx', '.tsm', '.tsc', '.json'],
                    },
                    typescript: {
                        alwaysTryTypes: true,
                    },
                },
            },
            rules: {
                '@typescript-eslint/no-explicit-any': 'error',
            },
        },
    ],
};
//# sourceMappingURL=eslintrc-template.js.map"
`;

exports[`migrate - configuing eslint > Create .eslintrc.js and install required dependencies 2`] = `
{
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.0.0",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^8.2.0",
    "eslint-import-resolver-typescript": "^2.5.0",
    "eslint-plugin-filename": "^1.0.3",
    "eslint-plugin-import": "^2.25.2",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-simple-import-sort": "^7.0.0",
    "eslint-plugin-tsdoc": "^0.2.14",
    "eslint-plugin-unicorn": "^39.0.0",
    "prettier": "^2.4.0",
    "typescript": "^4.8.2",
  },
  "license": "MIT",
  "main": "index.js",
  "name": "initilization",
  "version": "1.0.0",
}
`;

exports[`migrate - generate tsconfig > Create strict tsconfig 1`] = `
"{
  \\"$schema\\": \\"http://json.schemastore.org/tsconfig\\",
  \\"compilerOptions\\": {
    \\"baseUrl\\": \\".\\",
    \\"outDir\\": \\"dist\\",
    \\"strict\\": true,
    \\"noUncheckedIndexedAccess\\": true,
    \\"module\\": \\"es2020\\",
    \\"moduleResolution\\": \\"node\\",
    \\"newLine\\": \\"lf\\",
    \\"forceConsistentCasingInFileNames\\": true,
    \\"noFallthroughCasesInSwitch\\": true,
    \\"target\\": \\"es2020\\",
    \\"lib\\": [
      \\"es2020\\"
    ],
    \\"esModuleInterop\\": true,
    \\"declaration\\": true,
    \\"sourceMap\\": true,
    \\"declarationMap\\": true
  },
  \\"include\\": []
}
"
`;
