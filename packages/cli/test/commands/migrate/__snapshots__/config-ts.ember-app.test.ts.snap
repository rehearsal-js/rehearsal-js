// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Task: config-ts ember app > emberApp > create tsconfig if not existed 1`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`Task: config-ts ember app > emberApp > create tsconfig if not existed 2`] = `
"[STARTED] Create tsconfig.json
[DATA] /private/var/folders/0z/nxv8kql53p3_6phq_wn6wjlh0021b8/T/tmp-620021hqKzIuXKOUG/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberApp > postTsSetup hook from user config 1`] = `
"[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[DATA] Run postTsSetup from config
[SUCCESS] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberApp > run custom config command with user config provided 1`] = `
"[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberApp > skip custom config command 1`] = `
"[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberApp > skip if tsconfig.json exists with strict on 1`] = `
"[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppWithInRepoAddon > create tsconfig if not existed 1`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`Task: config-ts ember app > emberAppWithInRepoAddon > create tsconfig if not existed 2`] = `
"[STARTED] Create tsconfig.json
[DATA] /private/var/folders/0z/nxv8kql53p3_6phq_wn6wjlh0021b8/T/tmp-62002SISqTMHAT7ts/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppWithInRepoAddon > postTsSetup hook from user config 1`] = `
"[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[DATA] Run postTsSetup from config
[SUCCESS] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppWithInRepoAddon > run custom config command with user config provided 1`] = `
"[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppWithInRepoAddon > skip custom config command 1`] = `
"[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppWithInRepoAddon > skip if tsconfig.json exists with strict on 1`] = `
"[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppwithInRepoEngine > create tsconfig if not existed 1`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`Task: config-ts ember app > emberAppwithInRepoEngine > create tsconfig if not existed 2`] = `
"[STARTED] Create tsconfig.json
[DATA] /private/var/folders/0z/nxv8kql53p3_6phq_wn6wjlh0021b8/T/tmp-62002NQTjSDg6eUmY/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppwithInRepoEngine > postTsSetup hook from user config 1`] = `
"[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[DATA] Run postTsSetup from config
[SUCCESS] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppwithInRepoEngine > run custom config command with user config provided 1`] = `
"[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppwithInRepoEngine > skip custom config command 1`] = `
"[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
"
`;

exports[`Task: config-ts ember app > emberAppwithInRepoEngine > skip if tsconfig.json exists with strict on 1`] = `
"[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
[STARTED] Create tsconfig.json
[SKIPPED] Create tsconfig.json
"
`;
