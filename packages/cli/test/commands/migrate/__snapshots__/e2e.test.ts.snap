// Vitest Snapshot v1

exports[`migrate - validation > pass in a dirty git in multi runs 1`] = `
"info:    @rehearsal/migrate<test-version>
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Running migration on initilization
[SUCCESS] Initialize
[STARTED] Convert JS files to TS
[TITLE] Migration Complete
[TITLE]   0 JS files converted to TS
[TITLE]   0 errors caught by rehearsal
[TITLE]   0 have been fixed by rehearsal
[TITLE]   0 errors need to be fixed manually
[TITLE]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 0 eslint errors, with details in the report
[SUCCESS] Migration Complete
[SUCCESS]   0 JS files converted to TS
[SUCCESS]   0 errors caught by rehearsal
[SUCCESS]   0 have been fixed by rehearsal
[SUCCESS]   0 errors need to be fixed manually
[SUCCESS]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 0 eslint errors, with details in the report"
`;

exports[`migrate: e2e > Print debug messages with --verbose 1`] = `
"info:    @rehearsal/migrate<test-version>
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Running migration on basic
[SUCCESS] Initialize
[STARTED] Install dependencies
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[SUCCESS] Add package scripts
[STARTED] Convert JS files to TS
debug:   migration started
debug:   Base path: <tmp-path>
debug:   sourceFiles: [\\"<tmp-path>/foo.js\\",\\"<tmp-path>/depends-on-foo.js\\",\\"<tmp-path>/index.js\\"]
[DATA] git mv /foo.js to /foo.ts
[DATA] git mv /depends-on-foo.js to /depends-on-foo.ts
[DATA] git mv /index.js to /index.ts
debug:   config file: <tmp-path>/tsconfig.json
debug:   fileNames: [\\"<tmp-path>/foo.ts\\",\\"<tmp-path>/depends-on-foo.ts\\",\\"<tmp-path>/index.ts\\"]
[DATA] processing file: /foo.ts
[DATA] processing file: /depends-on-foo.ts
[DATA] processing file: /index.ts
[TITLE] Migration Complete
[TITLE]   3 JS files converted to TS
[TITLE]   2 errors caught by rehearsal
[TITLE]   1 have been fixed by rehearsal
[TITLE]   1 errors need to be fixed manually
[TITLE]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 1 eslint errors, with details in the report
[SUCCESS] Migration Complete
[SUCCESS]   3 JS files converted to TS
[SUCCESS]   2 errors caught by rehearsal
[SUCCESS]   1 have been fixed by rehearsal
[SUCCESS]   1 errors need to be fixed manually
[SUCCESS]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 1 eslint errors, with details in the report"
`;

exports[`migrate: e2e > againt specific basePath via --basePath option 1`] = `
"info:    @rehearsal/migrate<test-version>
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Running migration on base
[SUCCESS] Initialize
[STARTED] Install dependencies
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[SUCCESS] Add package scripts
[STARTED] Convert JS files to TS
[DATA] git mv /index.js to /index.ts
[DATA] processing file: /index.ts
[TITLE] Migration Complete
[TITLE]   1 JS file converted to TS
[TITLE]   3 errors caught by rehearsal
[TITLE]   0 have been fixed by rehearsal
[TITLE]   3 errors need to be fixed manually
[TITLE]     -- 2 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 1 eslint errors, with details in the report
[SUCCESS] Migration Complete
[SUCCESS]   1 JS file converted to TS
[SUCCESS]   3 errors caught by rehearsal
[SUCCESS]   0 have been fixed by rehearsal
[SUCCESS]   3 errors need to be fixed manually
[SUCCESS]     -- 2 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 1 eslint errors, with details in the report"
`;

exports[`migrate: e2e > againt specific basePath via --basePath option 2`] = `
"/* @ts-expect-error @rehearsal TODO TS7006: Parameter 'baz' implicitly has an 'any' type. */
export function run(baz) {
  /* @ts-expect-error @rehearsal TODO TS2304: Cannot find name 'foo'. */
  return foo(baz);
}
"
`;

exports[`migrate: e2e > againt specific basePath via --basePath option 3`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "module": "es2020",
    "moduleResolution": "node",
    "newLine": "lf",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "strict": true,
    "target": "ES2021",
  },
  "include": [
    "index.ts",
  ],
}
`;

exports[`migrate: e2e > againt specific basePath via --basePath option 4`] = `
"module.exports = {
  extends: [\\"./.rehearsal-eslintrc.js\\"],
};
"
`;

exports[`migrate: e2e > againt specific basePath via --basePath option 5`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate: e2e > default migrate command 1`] = `
"info:    @rehearsal/migrate<test-version>
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Running migration on basic
[SUCCESS] Initialize
[STARTED] Install dependencies
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[SUCCESS] Add package scripts
[STARTED] Convert JS files to TS
[DATA] git mv /foo.js to /foo.ts
[DATA] git mv /depends-on-foo.js to /depends-on-foo.ts
[DATA] git mv /index.js to /index.ts
[DATA] processing file: /foo.ts
[DATA] processing file: /depends-on-foo.ts
[DATA] processing file: /index.ts
[TITLE] Migration Complete
[TITLE]   3 JS files converted to TS
[TITLE]   2 errors caught by rehearsal
[TITLE]   1 have been fixed by rehearsal
[TITLE]   1 errors need to be fixed manually
[TITLE]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 1 eslint errors, with details in the report
[SUCCESS] Migration Complete
[SUCCESS]   3 JS files converted to TS
[SUCCESS]   2 errors caught by rehearsal
[SUCCESS]   1 have been fixed by rehearsal
[SUCCESS]   1 errors need to be fixed manually
[SUCCESS]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 1 eslint errors, with details in the report"
`;

exports[`migrate: e2e > default migrate command 2`] = `
"export function foo(name = \\"World\\") {
  return \`Hello \${name}\`;
}
"
`;

exports[`migrate: e2e > default migrate command 3`] = `
"import { foo } from \\"./foo\\";

console.log(foo(\\"hello\\"));
"
`;

exports[`migrate: e2e > default migrate command 4`] = `
"import { foo } from \\"./foo\\";

export function run(baz: string | undefined) {
  return foo(baz);
}
"
`;

exports[`migrate: e2e > default migrate command 5`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "module": "es2020",
    "moduleResolution": "node",
    "newLine": "lf",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "strict": true,
    "target": "ES2021",
  },
  "include": [
    "foo.ts",
    "depends-on-foo.ts",
    "index.ts",
  ],
}
`;

exports[`migrate: e2e > default migrate command 6`] = `
"module.exports = {
  extends: [\\"./.rehearsal-eslintrc.js\\"],
};
"
`;

exports[`migrate: e2e > default migrate command 7`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate: e2e > init flag 1`] = `
"info:    @rehearsal/migrate<test-version>
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Running migration on basic
[SUCCESS] Initialize
[STARTED] Install dependencies
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[SUCCESS] Add package scripts"
`;

exports[`migrate: e2e > init flag 2`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "module": "es2020",
    "moduleResolution": "node",
    "newLine": "lf",
    "noEmit": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "strict": true,
    "target": "ES2021",
  },
  "include": [],
}
`;

exports[`migrate: e2e > init flag 3`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate: e2e > regen result after the first pass 1`] = `
"info:    @rehearsal/migrate<test-version>
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Regenerating report for TS errors and Eslint errors
[DATA] processing file: /foo.ts
[DATA] processing file: /depends-on-foo.ts
[DATA] processing file: /index.ts
[TITLE] Migration Report Generated
[TITLE]   3 ts files have been scanned
[TITLE]   1 errors caught by rehearsal
[TITLE]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[TITLE]     -- 1 eslint errors, with details in the report
[SUCCESS] Migration Report Generated
[SUCCESS]   3 ts files have been scanned
[SUCCESS]   1 errors caught by rehearsal
[SUCCESS]     -- 0 ts errors, marked by @ts-expect-error @rehearsal TODO
[SUCCESS]     -- 1 eslint errors, with details in the report"
`;

exports[`migrate: e2e > user defined options passed by --user-config -u > migrate.exclude 1`] = `
"[32minfo[39m:    @rehearsal/migrate 1.0.9-beta
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize -- Dry Run Mode
[DATA] Running migration on my-package
[DATA] List of files will be attempted to migrate:
[DATA]  lib/a.js
[DATA] index.js
[SUCCESS] Initialize -- Dry Run Mode
[STARTED] Install dependencies
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[SUCCESS] Add package scripts"
`;

exports[`migrate: e2e > user defined options passed by --user-config -u > migrate.include 1`] = `
"[32minfo[39m:    @rehearsal/migrate 1.0.9-beta
[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize -- Dry Run Mode
[DATA] Running migration on my-package
[DATA] List of files will be attempted to migrate:
[DATA]  lib/a.js
[DATA] index.js
[DATA] test/index.js
[SUCCESS] Initialize -- Dry Run Mode
[STARTED] Install dependencies
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[SUCCESS] Add package scripts"
`;
