// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`migrate init for ember app variant > ember4App > default run --ember4App 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > ember4App > default run --ember4App 2`] = `
"module.exports = {
  extends: [\\"./.rehearsal-eslintrc.js\\"],
};
"
`;

exports[`migrate init for ember app variant > ember4App > default run --ember4App 3`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate init for ember app variant > ember4App > default run --ember4App 4`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`migrate init for ember app variant > ember4App > pass user config ember4App 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Install dependencies from config
[DATA] Installing dependecies: fs-extra
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript, tmp
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js from config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > ember4App > skip dep install, ts config, and lint config if exists 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[SKIPPED] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[SKIPPED] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberApp > default run --emberApp 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberApp > default run --emberApp 2`] = `
"module.exports = {
  extends: [\\"./.rehearsal-eslintrc.js\\"],
};
"
`;

exports[`migrate init for ember app variant > emberApp > default run --emberApp 3`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate init for ember app variant > emberApp > default run --emberApp 4`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`migrate init for ember app variant > emberApp > pass user config emberApp 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Install dependencies from config
[DATA] Installing dependecies: fs-extra
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript, tmp
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js from config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberApp > skip dep install, ts config, and lint config if exists 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[SKIPPED] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[SKIPPED] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberAppWithInRepoAddon > default run --emberAppWithInRepoAddon 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberAppWithInRepoAddon > default run --emberAppWithInRepoAddon 2`] = `
"module.exports = {
  extends: [\\"./.rehearsal-eslintrc.js\\"],
};
"
`;

exports[`migrate init for ember app variant > emberAppWithInRepoAddon > default run --emberAppWithInRepoAddon 3`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate init for ember app variant > emberAppWithInRepoAddon > default run --emberAppWithInRepoAddon 4`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`migrate init for ember app variant > emberAppWithInRepoAddon > pass user config emberAppWithInRepoAddon 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Install dependencies from config
[DATA] Installing dependecies: fs-extra
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript, tmp
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js from config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberAppWithInRepoAddon > skip dep install, ts config, and lint config if exists 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[SKIPPED] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[SKIPPED] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberAppwithInRepoEngine > default run --emberAppwithInRepoEngine 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js, extending Rehearsal default eslint-related config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberAppwithInRepoEngine > default run --emberAppwithInRepoEngine 2`] = `
"module.exports = {
  extends: [\\"./.rehearsal-eslintrc.js\\"],
};
"
`;

exports[`migrate init for ember app variant > emberAppwithInRepoEngine > default run --emberAppwithInRepoEngine 3`] = `
"module.exports = {
  \\"parser\\": \\"@typescript-eslint/parser\\",
  \\"parserOptions\\": {
    \\"sourceType\\": \\"module\\"
  },
  \\"plugins\\": [
    \\"@typescript-eslint\\",
    \\"prettier\\"
  ],
  \\"extends\\": [
    \\"plugin:@typescript-eslint/eslint-recommended\\",
    \\"plugin:@typescript-eslint/recommended\\",
    \\"eslint:recommended\\",
    \\"plugin:prettier/recommended\\",
    \\"prettier\\"
  ]
}"
`;

exports[`migrate init for ember app variant > emberAppwithInRepoEngine > default run --emberAppwithInRepoEngine 4`] = `
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,
    "alwaysStrict": true,
    "declaration": false,
    "experimentalDecorators": true,
    "importsNotUsedAsValues": "error",
    "inlineSourceMap": true,
    "inlineSources": true,
    "isolatedModules": true,
    "noEmit": true,
    "noImplicitOverride": true,
    "noUncheckedIndexedAccess": true,
    "preserveValueImports": true,
    "strict": true,
    "target": "es2020",
  },
  "display": "Ember App",
  "extends": "../base.tsconfig.json",
  "glint": {
    "environment": {
      "ember-loose": {},
      "ember-template-imports": {},
    },
  },
}
`;

exports[`migrate init for ember app variant > emberAppwithInRepoEngine > pass user config emberAppwithInRepoEngine 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[DATA] Install dependencies from config
[DATA] Installing dependecies: fs-extra
[DATA] Installing devDependencies: @types/node, @typescript-eslint/eslint-plugin, @typescript-eslint/parser, eslint, eslint-config-prettier, eslint-plugin-prettier, prettier, typescript, tmp
[SUCCESS] Install dependencies
[STARTED] Create tsconfig.json
[DATA] Create tsconfig from config
[SUCCESS] Create tsconfig.json
[STARTED] Create eslint config
[DATA] Create .eslintrc.js from config
[SUCCESS] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;

exports[`migrate init for ember app variant > emberAppwithInRepoEngine > skip dep install, ts config, and lint config if exists 1`] = `
"[STARTED] Validate project
[SUCCESS] Validate project
[STARTED] Initialize
[DATA] Setting up config for app-template
[SUCCESS] Initialize
[STARTED] Install dependencies
[SKIPPED] Install dependencies
[STARTED] Create tsconfig.json
[DATA] <tmp-path>/tsconfig.json already exists, ensuring strict mode is enabled
[TITLE] Update tsconfig.json
[SUCCESS] Update tsconfig.json
[STARTED] Create eslint config
[SKIPPED] Create eslint config
[STARTED] Add package scripts
[DATA] Adding \\"lint:tsc\\" script in package.json
[SUCCESS] Add package scripts
info:    The project is ready for migration. Please run \\"rehearsal migrate\\" to start the migration."
`;
